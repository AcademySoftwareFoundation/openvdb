OpenVDB Version History
=======================

Version 3.0.0 - January 14, 2015
    - The io::File class now supports delayed loading of .vdb files,
      meaning that memory is not allocated for voxel values until the values
      are actually accessed.  (This feature is enabled by default.)
      Until a grid has been fully loaded, its source .vdb file must not be
      modified or deleted, so for safety, io::File::open() automatically makes
      private copies of source files that are smaller than a user-specified
      limit (see io::File::setCopyMaxBytes()).  The limit can be set to zero
      to disable copying, but if it cannot be guaranteed that a file will not
      be modified, then it is best not to enable delayed loading for that file.
    - .vdb files can now optionally be compressed with the Blosc LZ4 codec.
      Blosc compresses almost as well as ZLIB, but it is much faster.
    - Added tools::PointPartitioner, a tool for fast spatial sorting
      of points stored in an external array, and tools::PointIndexGrid,
      an acceleration structure for fast range and nearest-neighbor searches.
    - Added tree::NodeManager, which linearizes a tree to facilitate
      efficient multithreading across all tree levels.
    - Added tools::prune() (and other variants), which replaces and
      outperforms Tree::prune().
    - Added tools::signedFloodFill(), which replaces and outperforms
      Tree::signedFloodFill().
    - Added tools::changeBackground (and other variants), which replaces
      and outperforms Tree::setBackground().
    - Added a fast but approximate narrow-band level set dilation method,
      a fast narrow-band level set erosion method,
      and a masked normalization method to tools::LevelSetTracker.
    - Added tools::Diagnose, which performs multithreaded diagnostics on grids
      to identify issues like values that are NaNs or out-of-range.
      It optionally generates a boolean grid of all values that fail
      user-defined tests.
    - Added optional alpha masks to tools::LevelSetMorphing.
    - Fixed an intermittent crash in tools::LevelSetMorphing.
    - Added tools::topologyToLevelSet(), which generates a level set
      from the implicit boundary between active and inactive voxels
      in an arbitrary input grid.
      [DWA internal]
    - Improved the performance of point scattering (by orders of magnitude)
      and added a DenseUniformPointScatter class as well as support for
      fractional numbers of particles per voxel.
    - Added edge-adjacent (6+12=18 neighbors) and vertex-adjacent (6+12+8=26
      neighbors) dilation algorithms to tools::Morphology::dilateVoxels().
      The default dilation pattern is still face-adjacent (6 neighbors).
    - Improved the performance and memory footprint of the ParticlesToLevelSet
      tool for large numbers (tens to hundreds of millions) of particles.
    - Added Tree::getNodes(), which allows for fast construction of
      linear arrays of tree nodes for use in multithreaded code
      such as the LeafManager or NodeManager.
    - Added math::Extrema and tools::extrema() to efficiently compute
      minimum and maximum values in a grid.
    - Added support for material color grids to all level set shaders,
      and added an option to vdb_render that allows one to specify a
      reference grid to be used for material color lookups.
    - Added openvdb::getLibraryVersionString() and
      OPENVDB_LIBRARY_VERSION_STRING.
    - Modified the mesh to volume converter to always set the grid background
      value to the exterior narrow-band width, and added finite value checks
      to narrow band parameters.
    - tools::volumeToMesh() now compiles for all grid types but throws an
      exception if the input grid does not have a scalar value type.
    - Added an io::File::readGrid() overload and readBuffers() overloads
      to the grid, tree and node classes that allow one to specify
      a bounding box against which to clip a grid while reading it.
      For large grids, clipping while reading can result in significantly
      lower memory usage than clipping after reading.
    - Added Grid::clipGrid(), which clips a grid against a world-space
      bounding box, and Grid::clip() and Tree::clip(), which clip against
      an index-space bounding box.
    - Added tools::clip(), which clips a grid either against a bounding box
      or against the active voxels of a mask grid.
    - io::File::readGridPartial() allocates the nodes of a grid's tree
      as before, but it now allocates leaf nodes without data buffers.
      (This feature is mainly for internal use; partially-read grids should be
      used with care if at all, and they should be treated as read-only.)
    - Grid names retrieved using an io::File::NameIterator now always uniquely
      identify grids; they no longer generate 'more than one grid named "x"'
      warnings when there are multiple grids of the same name in a file
      (for files written starting with this version of the OpenVDB library).
    - Fixed a bug in Tree::ValueOffIter that could cause depth-bounded
      iterators to return incorrect values.
    - Eliminated a recursive call in TreeValueIteratorBase::advance() that
      could cause crashes on systems with a limited stack size.
    - Fixed memory leaks in RootNode::topologyDifference() and
      RootNode::topologyIntersection().
    - Fixed a memory leak in io::Queue when the queue was full and
      a write task could not be added within the timeout interval.
    - Fixed a potential division by zero crash in tools::compDiv()
      with integer-valued grids.
    - Fixed kernel normalization in tools::Filter so that it is correct
      for integer-valued grids.
    - Fixed a bug in LeafNode::Buffer::getValue() whereby Visual C++
      would return a reference to a temporary.
      [Contributed by SESI]
    - Fixed a bug in tools::ParticlesToLevelSet related to attribute transfer
      when leaf nodes are produced without active values.
    - Added util/CpuTimer.h and removed the more simplistic CpuTimer
      from unittest/util.h.
    - Eliminated the use of getopt() for command-line argument parsing
      in vdb_test.
    - openvdb::initialize() now properly initializes log4cplus if it is
      enabled, eliminating "No appenders could be found" errors.
    - Fixed a bug in the QuantizedUnitVec::pack() method that caused
      quantization artifacts.
    - Added convenience class tools::AlphaMask to tools/Interpolation.h
    - Added constructors and methods to both math::RandInt and math::Rand01
      to set and reset the random seed value.
    - Added convenience methods for transforming bounding boxes to
      math::Transform.
    - vdb_view is now compatible with both GLFW 2 and GLFW 3.
    - Made many small changes to address type conversion and other warnings
      reported by newer compilers like GCC 4.8 and ICC 14.
    - Replaced the HALF_INCL_DIR and HALF_LIB_DIR Makefile variables
      with ILMBASE_INCL_DIR and ILMBASE_LIB_DIR and added ILMBASE_LIB,
      to match OpenEXR's library organization.
      [Contributed by Double Negative]
    - Eliminated most local (function-scope) static variables, because
      Visual C++ doesn't guarantee thread-safe initialization of local statics.
      [Contributed by SESI]
    - Fixed a bug in readString() related to empty strings.
      [Contributed by Fabio Piparo]
    - Fixed a bug in the tools::VolumeToMesh simplification scheme that
      was creating visual artifacts.

    API changes:
    - The addition of a GridBase::readBuffers() virtual function overload
      and the GridBase::clip(), GridBase::readNonresidentBuffers() and
      Tree::clipUnallocatedNodes() virtual functions changes the grid ABI
      so that it is incompatible with earlier versions of the OpenVDB library
      (such as the ones in Houdini 12.5 and 13).  Define the macro
      OPENVDB_2_ABI_COMPATIBLE when compiling OpenVDB to disable these changes
      and preserve ABI compatibility.
    - All shaders now have a template argument to specify the type of
      an optional material color grid, but the default type mimics
      the old, uniform color behavior.
    - Removed a deprecated io::Stream::write() overload.
    - The point counts in the UniformPointScatter and NonUniformPointScatter
      tools are now specified and returned as Index64.
    - math::RandInt has an extra template argument to specify the integer
      type.  The RandomInt typedef is unchanged.
    - io::readData(), io::HalfReader::read() and io::HalfWriter::write() now
      take a uint32_t argument indicating the type of compression instead of
      a bool indicating whether compression is enabled.
    - Removed io::Archive::isCompressionEnabled() and
      io::Archive::setCompressionEnabled() and renamed
      io::Archive::compressionFlags() and io::Archive::setCompressionFlags()
      to io::Archive::compression() and io::Archive::setCompression().
    - Internal and leaf node classes are now required to provide
      "PartialCreate" constructors that optionally bypass the allocation
      of voxel buffers.  Leaf node classes must now also provide allocate()
      and isAllocated() methods to manage the allocation of their buffers.
    - Removed pruneInactive() and pruneLevelSet() methods from the Tree
      and various node classes.  These methods have been replaced by
      the much faster pruning functions found in tools/Prune.h.
    - Removed signedFloodFill() methods from the Grid, Tree and various
      node classes.  These methods have been replaced by the much faster
      functions found in tools/SignedFloodFill.h.
    - Removed Grid::setBackground() and Tree::setBackground() (use the faster
      changeBackground() tool instead), and removed the default argument
      from RootNode::setBackground().

    Python:
    - Added grid methods convertToPolygons() and convertToQuads(),
      which convert volumes to meshes, and createLevelSetFromPolygons(),
      which converts meshes to volumes.  NumPy is required.

    Maya:
    - Added an adaptive polygonal surface extraction node.

    Houdini:
    - Added a new Resize Narrow Band SOP that can efficiently adjust the width
      of a level set's narrow band.  This allows, for example, for a level set
      to be created quickly from points or polygons with a very narrow band
      that is then quickly resized to a desired width.
    - Fixed bugs in the Smooth Level Set and Reshape Level Set SOPs that
      caused them to ignore the selected discretization scheme.
    - Added a Morph Level Set SOP.
    - Added a From Points SOP to very quickly generate a level set
      from a point cloud, ignoring any radius attribute.
      [DWA internal]
    - Added a Voxel Scale mode to the Resample SOP.
    - Improved the performance and memory footprint of the From Particles SOP
      for large numbers (tens to hundreds of millions) of particles.
    - The Scatter SOP now accepts fractional numbers of particles per voxel.
    - Improved the performance of the Scatter SOP by more than an order
      of magnitude.
    - The Clip SOP now has a toggle to choose explicitly between a mask grid
      or a bounding box as the clipping region.  As a consequence, the
      mask grid can now be unnamed.
    - Added the OpenVDB library version number to the Extended Operator
      Information for all SOPs.
    - SOPs are now linked with an rpath to the directory containing the
      OpenVDB library.
    - Like the native Houdini file SOP, the Read SOP now allows missing frames
      to be reported either as errors or as warnings.
    - The Read SOP now has an optional input for geometry, the bounding box
      of which can be used to clip grids as they are read.  For large grids,
      clipping while reading can result in significantly lower memory usage
      than clipping after reading.
    - The From Polygons and Convert SOPs now default to using the polygon soup
      mesh representation, which uses less memory.

Version 2.3.0 - April 23, 2014
    - Added tools::extractSparseTree(), which selectively extracts and
      transforms data from a dense grid to produce a sparse tree,
      and tools::extractSparseTreeWithMask(), which copies data from
      the index-space intersection of a sparse tree and a dense input grid.
    - Added copy constructors to the Grid, Tree, RootNode, InternalNode
      and LeafNode classes, and an assignment operator overload to RootNode,
      that allow the source and destination to have different value types.
    - Modified Tree::combine2() to permit combination of trees with different
      value types.
    - Added CanConvertType and RootNode::SameConfiguration metafunctions,
      which perform compile-time tests for value type and tree type
      compatibility, and a RootNode::hasCompatibleValueType() method,
      which does runtime checking.
    - Added optional support for logging using log4cplus.  See logging.h
      and the INSTALL file for details.
    - Added VolumeRayIntersector::hits(), which returns all the hit segments
      along a ray.  This is generally more efficient than repeated calls
      to VolumeRayIntersector::march().
    - Added member class Ray::TimeSpan and method Ray::valid(), and
      deprecated method Ray::test().
    - Fixed a bug in VolumeHDDA that could cause rendering artifacts
      when a ray's start time was zero.
      [Contributed by Mike Farnsworth]
    - Added tools::compositeToDense(), which composites data from a
      sparse tree into a dense array, using a sparse alpha mask.
      Over, Add, Sub, Min, Max, Mult, and Set are supported operations.
    - Added tools::transformDense(), which applies a functor to the value
      of each voxel of a dense grid within a given bounding box.
    - Improved the performance of node iterators.

    API changes:
    - Collected the digital differential analyzer code from math/Ray.h
      and tools/RayIntersector.h into a new header file, math/DDA.h.
    - Rewrote VolumeHDDA and made several changes to its API.  (VolumeHDDA
      is used internally by VolumeRayIntersector, whose API is unchanged.)
    - Tree::combine2(), RootNode::combine2(), InternalNode::combine2(),
      LeafNode::combine2() and CombineArgs all now require an additional
      template argument, which determines the type of the other tree.
    - Assignment operators for LeafManager::LeafRange::Iterator,
      BaseMaskIterator, NodeMask and RootNodeMask now return references
      to the respective objects.
    - Removed a number of methods that were deprecated in version 2.0.0
      or earlier.

    Houdini:
    - Added a Clip SOP, which does volumetric clipping.
    - Added an Occlusion Mask SOP, which generates a mask of the voxels
      inside a camera frustum that are occluded by objects in an input grid.
    - The Combine SOP now applies the optional signed flood fill only to
      level set grids, since that operation isn't meaningful for other grids.
    - The Filter SOP now processes all grid types, not just scalar grids.

Version 2.2.0 - February 20, 2014
    - Added a simple, multithreaded volume renderer, and added volume
      rendering support to the vdb_render command-line renderer.
    - Added an option to the LevelSetRayIntersector and to vdb_render
      to specify the isovalue of the level set.
    - Added methods to the LevelSetRayIntersector to return the time of
      intersection along a world or index ray and to return the level set
      isovalue.
    - Improved the performance of the VolumeRayIntersector and added
      support for voxel dilation to account for interpolation kernels.
    - Added a section to the Cookbook on interpolation using BoxSampler,
      GridSampler, DualGridSampler, et al.
    - Added a section to the Overview on grids and grid metadata.
    - Modified tools::DualGridSampler so it is more consistent with
      tools::GridSampler.
    - tools::cpt(), tools::curl(), tools::laplacian(), tools::meanCurvature()
      and tools::normalize() now output grids with appropriate vector types
      (covariant, contravariant, etc.).
    - Added tools::transformVectors(), which applies an affine transformation
      to the voxel values of a vector-valued grid in accordance with the
      grid's Vector Type and World Space/Local Space metadata setting.
    - Added tools::compDiv(), which combines grids by dividing the values
      of corresponding voxels.
    - Fixed a bug in the mean curvature computation that could produce NaNs
      in regions with constant values.
    - Added a Grid::topologyDifference() method.
    - Added exp() and sum() methods to math::Vec2, math::Vec3 and math::Vec4.
    - Improved tools::fillWithSpheres() for small volumes that are just a few
      voxels across.
    - Improved the accuracy of the mesh to volume converter.
    - Fixed a bug in the mesh to volume converter that caused incorrect sign
      classifications for narrow-band level sets.
    - Fixed a bug in NonlinearFrustumMap::applyIJT() that resulted in incorrect
      values when computing the gradient of a grid with a frustum transform.
    - Fixed a file I/O bug whereby some .vdb files could not be read correctly
      if they contained grids with more than two distinct inactive values.
    - Fixed an off-by-one bug in the numbering of unnamed grids in .vdb files.
      The first unnamed grid in a file is now retrieved using the name "[0]",
      instead of "[1]".
    - Fixed a build issue reported by Clang 3.2 in tools/GridOperators.h.
    - Fixed a memory leak in tools::Film.
    - Added library and file format version number constants to the
      Python module.
    - Improved convergence in the volume renderer.
      [Contributed by Jerry Tessendorf and Mark Matthews]
    - Made various changes for compatibility with Houdini 13 and with
      C++11 compilers.
      [Contributed by SESI]

    API changes:
    - tools::VolumeRayIntersector::march() no longer returns an int
      to distinguish tile vs. voxel hits.  Instead, it now returns false
      if no intersection is detected and true otherwise.  Also, t0 and t1
      might now correspond to the first and last hits of multiple adjacent
      leaf nodes and/or active tiles.
    - tools::DualGridSampler is no longer templated on the target grid type,
      and the value accessor is now passed as an argument.
    - The .vdb file format has changed slightly.  Tools built with older
      versions of OpenVDB should be recompiled to ensure that they can read
      files in the new format.

    Houdini:
    - Added topology union, intersection and difference operations to
      the Combine SOP.  These operations combine the active voxel topologies
      of grids that may have different value types.
    - Added a Divide operation to the Combine SOP.
    - Added support for boolean grids to the Combine, Resample, Scatter, Prune
      and Visualize SOPs.
    - The Fill SOP now accepts a vector as the fill value, and it allows
      the fill region bounds to be specified either in index space (as before),
      in world space, or using the bounds of geometry connected to an optional
      new reference input.
    - Added a toggle to the Offset Level Set SOP to specify the offset in
      either world or voxel units.
    - Added a toggle to the Transform and Resample SOPs to apply the
      transform to the voxel values of vector-valued grids, in accordance with
      those grids' Vector Type and World Space/Local Space metadata settings.
    - Added a Vector Type menu to the Vector Merge SOP.
    - Removed masking options from the Renormalize SOP (since masking is
      not supported yet).
    - Reimplemented the Vector Merge SOP for better performance and
      interruptibility and to fix a bug in the handling of tile values.

Version 2.1.0 - December 12, 2013
    - Added a small number of Maya nodes, primarily for conversion of geometry
      to and from OpenVDB volumes and for visualization of volumes.
    - Added an initial implementation of level set morphing (with improvements
      to follow soon).
    - Added tools::LevelSetMeasure, which efficiently computes the surface area,
      volume and average mean-curvature of narrow-band level sets, in both
      world and voxel units.  Those quantities are now exposed as intrinsic
      attributes on the Houdini VDB primitive and can be queried using the
      native Measure SOP.
    - tools::Dense now supports the XYZ memory layout used by Houdini and Maya
      in addition to the ZYX layout used in OpenVDB trees.
    - Improved the performance of masking in the level set filter tool and
      added inversion and scaling of the mask input, so that any scalar-valued
      volume can be used as a mask, not just volumes with a [0, 1] range.
    - Added optional masking to the non-level-set filters, to the grid
      operators (CPT, curl, divergence, gradient, Laplacian, mean curvature,
      magnitude, and normalize) and to the Analysis and Filter SOPs.
    - Added more narrow band controls to the Rebuild Level Set SOP.
    - Improved the accuracy of the level set rebuild tool.
    - Added tools::activate() and tools::deactivate(), which set the active
      states of tiles and voxels whose values are equal to or approximately
      equal to a given value, and added a Deactivate Background Voxels toggle
      to the Combine SOP.
    - Added math::BBox::applyMap() and math::BBox::applyInverseMap(), which
      allow for transformation of axis-aligned bounding boxes.
    - Added a position shader to the level set ray-tracer (primarily for
      debugging purposes).
    - Added an io::Queue class that manages a concurrent queue for
      asynchronous serialization of grids to files or streams.
    - Fixed a bug in io::Archive whereby writing unnamed, instanced grids
      (i.e., grids sharing a tree) to a file rendered the file unreadable.
    - Fixed a bug in the volume to mesh converter that caused it to generate
      invalid polygons when the zero crossing lay between active and inactive
      regions.
    - Fixed a bug in the point scatter tool (and the Scatter SOP) whereby
      the last voxel always remained empty.
    - Fixed a bug in the Read SOP that caused grids with the same name
      to be renamed with a numeric suffix (e.g., "grid[1]", "grid[2]", etc.).
    - Fixed some unit test failures on 64-bit Itanium machines.

    API changes:
    - The Filter tool is now templated on a mask grid, and threading is
      controlled using a grain size, for consistency with most of the
      other level set tools.
    - The level set filter tool is now templated on a mask grid.
    - All shaders now take a ray direction instead of a ray.

Version 2.0.0 - October 31, 2013
    - Added a Python module with functions for basic manipulation of grids
      (but no tools, yet).
    - Added ray intersector tools for efficient, hierarchical intersection
      of rays with level-set and generic volumes.
    - Added a Ray class and a hierarchical Digital Differential Analyzer
      for fast ray traversal.
    - Added a fully multithreaded level set ray tracer and camera classes
      that mimic Houdini's cameras.
    - Added a simple, command-line renderer (currently for level sets only).
    - Implemented a new meshing scheme that produces topologically robust
      two-manifold meshes and is twice as fast as the previous scheme.
    - Implemented a new, topologically robust (producing two-manifold meshes)
      level-set-based seamless fracture scheme.  The new scheme eliminates
      visible scarring seen in the previous implementation by subdividing
      internal, nonplanar quads near fracture seams.  In addition,
      fracture seam points are now tagged, allowing them to be used
      to drive pre-fracture dynamics such as local surface buckling.
    - Improved the performance of Tree::evalActiveVoxelBoundingBox() and
      Tree::activeVoxelCount(), and significantly improved the performance
      of Tree::evalLeafBoundingBox() (by about 30x).
    - Added a tool (and a Houdini SOP) that fills a volume with
      adaptively-sized overlapping or non-overlapping spheres.
    - Added a Ray SOP that can be used to perform geometry projections
      using level-set ray intersections or closest-point queries.
    - Added a tool that performs accelerated closest surface point queries
      from arbitrary points in world space to narrow-band level sets.
    - Increased the speed of masked level set filtering by 20% for
      the most common cases.
    - Added math::BoxStencil, with support for trilinear interpolation
      and gradient computation.
    - Added Tree::topologyIntersection(), which intersects a tree's active
      values with those of another tree, and Tree::topologyDifference(),
      which performs topological subtraction of one tree's active values
      from another's.  In both cases, the ValueTypes of the two trees
      need not be the same.
    - Added Tree::activeTileCount(), which returns the number of active tiles
      in a tree.
    - Added math::MinIndex() and math::MaxIndex(), which find the minimum
      and maximum components of a vector without any branching.
    - Added math::BBox::minExtent(), which returns a bounding box's
      shortest axis.
    - The default math::BBox constructor now generates an invalid bounding
      box rather than an empty bounding box positioned at the origin.
      The new behavior is consistent with math::CoordBBox.
      [Thanks to Rick Hankins for suggesting this fix.]
    - Added CoordBBox::reset(), which resets a bounding box to its initial,
      invalid state.
    - Fixed a bug in the default ScaleMap constructor that left some data
      used in the inverse uninitialized.
    - Added MapBase::applyJT(), which applies the Jacobian transpose to
      a vector (the Jacobian transpose takes a range-space vector to a
      domain-space vector, e.g., world to index), and added
      MapBase::inverseMap(), which returns a new map representing
      the inverse of the original map (except for NonlinearFrustumMap,
      which does not currently have a defined inverse map).
      Note: Houdini 12.5 uses an earlier version of OpenVDB, and maps
      created with that version lack virtual table entries for these
      new methods, so do not call these methods from Houdini 12.5.
    - Reimplemented math::RandomInt using Boost.Random instead of rand()
      (which is not thread-safe), and deprecated math::randUniform()
      and added math::Random01 to replace it.
    - Modified tools::copyFromDense() and tools::copyToDense() to allow
      for implicit type conversion (e.g., between a Dense<Int32> and a
      FloatTree) and fixed several bugs in tools::CopyFromDense.
    - Fixed bugs in math::Stats and math::Histogram that could produce
      NaNs or other incorrect behavior if certain methods were called
      on populations of size zero.
    - Renamed tolerance<T> to math::Tolerance<T> and negative<T>() to
      math::negative<T>() and removed math::toleranceValue<T>().
    - Implemented a closest point on line segment algorithm,
      math::closestPointOnSegmentToPoint().
    - Fixed meshing issues relating to masking and automatic partitioning.
    - Grid::merge() and Tree::merge() now accept an optional MergePolicy
      argument that specifies one of three new merging schemes.  (The old
      merging scheme, which is no longer available, used logic for each tree
      level that was inconsistent with the other levels and that could result
      in active tiles being replaced with nodes having only inactive values.)
    - Renamed LeafNode::coord2offset(), LeafNode::offset2coord() and
      LeafNode::offset2globalCoord() to coordToOffset(), offsetToLocalCoord()
      and offsetToGlobalCoord(), respectively, and likewise for InternalNode.
      [Thanks to Rick Hankins for suggesting this change.]
    - Replaced Tree methods setValueOnMin(), setValueOnMax() and
      setValueOnSum() with tools::setValueOnMin(), tools::setValueOnMax() and
      tools::setValueOnSum() (and a new tools::setValueOnMult()) and added
      Tree::modifyValue() and Tree::modifyValueAndActiveState(), which modify
      voxel values in place via user-supplied functors.  Similarly, replaced
      ValueAccessor::setValueOnSum() with ValueAccessor::modifyValue()
      and ValueAccessor::modifyValueAndActiveState(), and added a modifyValue()
      method to all value iterators.
    - Removed LeafNode::addValue() and LeafNode::scaleValue().
    - Added convenience classes Tree3 and Tree5 for custom tree configurations.
    - Added an option to the From Particles SOP to generate an alpha mask,
      which can be used to constrain level set filtering so as to preserve
      surface details.
    - The mesh to volume converter now handles point-degenerate polygons.
    - Fixed a bug in the Level Set Smooth, Level Set Renormalize and
      Level Set Offset SOPs that caused the group name to be ignored.
    - Fixed various OS X and Windows build issues.
      [Contributions from SESI and DD]

Version 1.2.0 - June 28, 2013
    - Level set filters now accept an optional alpha mask grid.
    - Implemented sharp feature extraction for level set surfacing.
      This enhances the quality of the output mesh and reduces aliasing
      artifacts.
    - Added masking options to the meshing tools, as well as a spatial
      multiplier for the adaptivity threshold, automatic partitioning,
      and the ability to preserve edges and corners when mesh adaptivity
      is applied.
    - The mesh to volume attribute transfer scheme now takes surface
      orientation into account, which improves accuracy in proximity to
      edges and corners.
    - Added a foreach() method to tools::LeafManager that, like
      tools::foreach(), applies a user-supplied functor to each leaf node
      in parallel.
    - Rewrote the particle to level set converter, simplifying the API,
      improving performance (especially when particles have a fixed radius),
      adding the capability to transfer arbitrary point attributes,
      and fixing a velocity trail bug.
    - Added utility methods Sign(), SignChange(), isApproxZero(), Cbrt()
      and ZeroCrossing() to math/Math.h.
    - Added a probeNode() method to the value accessor and to tree nodes
      that returns a pointer to the node that contains a given voxel.
    - Deprecated LeafNode::addValue() and LeafNode::scaleValue().
    - Doubled the speed of the mesh to volume converter (which also improves
      the performance of the fracture and level set rebuild tools) and
      improved its inside/outside voxel classification near edges and corners.
    - tools::GridSampler now accepts either a grid, a tree or a value accessor,
      and it offers faster index-based access methods and much better
      performance in cases where many instances are allocated.
    - Extended tools::Dense to make it more compatible with existing tools.
    - Fixed a crash in io::Archive whenever the library was unloaded
      from memory and then reloaded.
      [Contributed by Ollie Harding]
    - Fixed a bug in GU_PrimVDB::buildFromPrimVolume(), seen during the
      conversion from Houdini volumes to OpenVDB grids, that could cause
      signed flood fill to be applied to non-level set grids, resulting in
      active tiles with incorrect values.
    - Added a Prune SOP with several pruning schemes.

Version 1.1.1 - May 10 2013
    - Added a simple dense grid class and tools to copy data from
      dense voxel arrays into OpenVDB grids and vice-versa.
    - Starting with Houdini 12.5.396, plugins built with this version
      of OpenVDB can coexist with native Houdini OpenVDB nodes.
    - The level set fracture tool now smooths seam line edges during
      mesh extraction, eliminating staircase artifacts.
    - Significantly improved the performance of the
      util::leafTopologyIntersection() and util::leafTopologyDifference()
      utilities and added a LeafNode::topologyDifference() method.
    - Added convenience functions that provide simplified interfaces
      to the mesh to volume and volume to mesh converters.
    - Added a tools::accumulate() function that is similar to tools::foreach()
      but can be used to accumulate the results of computations over
      the values of a grid.
    - Added tools::statistics(), tools::opStatistics() and tools::histogram(),
      which efficiently compute statistics (mean, variance, etc.) and
      histograms of grid values (using math::Stats and math::Histogram).
    - Modified CoordBBox to adhere to TBB's splittable type requirements,
      so that, for example, a CoordBBox can be used as a blocked
      iteration range.
    - Added Tree::addTile(), Tree::addLeaf() and Tree::stealNode(), for
      fine control over tree construction.
    - Addressed a numerical stability issue when performing Gaussian
      filtering of level set grids.
    - Changed the return type of CoordBBox::volume() to reduce the risk
      of overflow.
    - When the input mesh is self-intersecting, the mesh to volume converter
      now produces a level set with a monotonic gradient field.
    - Fixed a threading bug in the mesh to volume converter that caused it
      to produce different results for the same input.
    - Fixed a bug in the particle to level set converter that prevented
      particles with zero velocity from being rasterized in Trail mode.
    - Added an optional input to the Create SOP into which to merge
      newly-created grids.
    - Fixed a bug in the Resample SOP that caused it to produce incorrect
      narrow-band widths when resampling level set grids.
    - Fixed a bug in the To Polygons SOP that caused intermittent crashes
      when the optional reference input was connected.
    - Fixed a bug in the Advect Level Set SOP that caused a crash
      when the velocity input was connected but empty.
    - The Scatter and Sample Point SOPs now warn instead of erroring
      when given empty grids.
    - Fixed a crash in vdb_view when stepping through multiple grids
      after changing render modes.
    - vdb_view can now render fog volumes and vector fields, and it now
      features interactively adjustable clipping planes that enable
      one to view the interior of a volume.

Version 1.1.0 - April 4 2013
    - The resampleToMatch() tool, the Resample SOP and the Combine SOP
      now use level set rebuild to correctly and safely resample level sets.
      Previously, scaling a level set would invalidate the signed distance
      field, leading to holes and other artifacts.
    - Added a mask-based topological erosion tool, and rewrote and simplified
      the dilation tool.
    - The LevelSetAdvection tool can now advect forward or backward in time.
    - Tree::pruneLevelSet() now replaces each pruned node with a tile having
      the inside or outside background value, instead of arbitrarily selecting
      one of the node's tile or voxel values.
    - When a grid is saved to a file with saveFloatAsHalf() set to true,
      the grid's background value is now also quantized to 16 bits.
      (Not quantizing the background value caused a mismatch with the values
      of background tiles.)
    - As with tools::foreach(), it is now possible to specify whether functors
      passed to tools::transformValues() should be shared across threads.
    - tree::LeafManager can now be instantiated with a const tree,
      although buffer swapping with const trees is disabled.
    - Added a Grid::signedFloodFill() overload that allows one to specify
      inside and outside values.
    - Fixed a bug in Grid::setBackground() so that now only the values of
      inactive voxels change.
    - Fixed Grid::topologyUnion() so that it actually unions tree topology,
      instead of just the active states of tiles and voxels.  The previous
      behavior broke multithreaded code that relied on input and output grids
      having compatible tree topology.
    - math::Transform now includes an isIdentity() predicate and methods
      to pre- and postmultiply by a matrix.
    - Modified the node mask classes to permit octree-like tree configurations
      (i.e., with a branching factor of two) and to use 64-bit operations
      instead of 32-bit operations.
    - Implemented a new, more efficient closest point on triangle algorithm.
    - Implemented a new vertex normal scheme in the volume to mesh
      converter, and resolved some overlapping polygon issues.
    - The volume to mesh converter now meshes not just active voxels
      but also active tiles.
    - Fixed a bug in the mesh to volume converter that caused unsigned
      distance field conversion to produce empty grids.
    - Fixed a bug in the level set fracture tool whereby the cutter overlap
      toggle was ignored.
    - Fixed an infinite loop bug in vdb_view.
    - Updated vdb_view to use the faster and less memory-intensive
      OpenVDB volume to mesh converter instead of marching cubes,
      and rewrote the shader to be OpenGL 3.2 and GLSL 1.2 compatible.
    - Given multiple input files or a file containing multiple grids,
      vdb_view now displays one grid at a time.  The left and right
      arrow keys cycle between grids.
    - The To Polygons SOP now has an option to associate the input grid's
      name with each output polygon.

Version 1.0.0 - March 14 2013
    - tools::levelSetRebuild() now throws an exception when given a
      non-scalar or non-floating-point grid.
    - The tools in tools/GridOperators.h are now interruptible, as is
      the Analysis SOP.
    - Added a leaf node iterator and a TBB-compatible range class to
      the LeafManager.
    - Modified the VolumeToMesh tool to handle surface topology issues
      around fracture seam lines.
    - Modified the Makefile to allow vdb_view to compile on OS X systems
      (provided that GLFW is available).
    - Fixed a bug in the Create SOP that resulted in "invalid parameter name"
      warnings.
    - The Combine SOP now optionally resamples the A grid into the B grid's
      index space (or vice-versa) if the A and B transforms differ.
    - The Vector Split and Vector Merge SOPs now skip inactive voxels
      by default, but they can optionally be made to include inactive voxels,
      as they did before.
    - The LevelSetFracture tool now supports custom rotations for each
      cutter instance, and the Fracture SOP now uses quaternions to generate
      uniformly-distributed random rotations.

Version 0.104.0 - February 15 2013
    - Added a tool and a SOP to rebuild a level set from any scalar volume.
    - .vdb files are now saved using a mask-based compression scheme
      that is an order of magnitude faster than ZLIB and produces comparable
      file sizes for level set and fog volume grids.  (ZLIB compression
      is still enabled by default for other classes of grids).
    - The Filter and LevelSetFilter tools now include a Gaussian filter,
      and mean (box) filtering is now 10-50x faster.
    - The isosurface meshing tool is now more robust (to level sets
      with one voxel wide narrow bands, for example).
    - Mesh to volume conversion is on average 1.5x faster and up to 5.5x
      faster for high-resolution meshes where the polygon/voxel size ratio
      is small.
    - Added createLevelSet() and createLevelSetSphere() factory functions
      for level set grids.
    - tree::ValueAccessor is now faster for trees of height 2, 3 and 4
      (the latter is the default), and it now allows one to specify,
      via a template argument, the number of node levels to be cached,
      which can also improve performance in special cases.
    - Added a toggle to tools::foreach() to specify whether or not
      the functor should be shared across threads.
    - Added Mat4s and Mat4d metadata types.
    - Added explicit pre- and postmultiplication methods to the Transform,
      Map and Mat4 classes and deprecated the old accumulation methods.
    - Modified NonlinearFrustumMap to be more compatible with Houdini's
      frustum transform.
    - Fixed a GridTransformer bug that caused it to translate the
      output grid incorrectly in some cases.
    - Fixed a bug in the tree-level LeafIterator that resulted in
      intermittent crashes in tools::dilateVoxels().
    - The Hermite data type and Hermite grids are no longer supported.
    - Added tools/GridOperators.h, which includes new, cleaner implementations
      of the Cpt, Curl, Divergence, Gradient, Laplacian, Magnitude,
      MeanCurvature and Normalize tools.
    - Interrupt support has been improved in several tools, including
      tools::ParticlesToLevelSet.
    - Simplified the API of the Stencil class and added an intersects()
      method to test for intersection with a specified isovalue.
    - Renamed voxelDimensions to voxelSize in transform classes and elsewhere.
    - Deprecated houdini_utils::ParmFactory::setChoiceList() in favor of
      houdini_utils::ParmFactory::setChoiceListItems(), which requires
      a list of token, label string pairs.
    - Made various changes for Visual C++ compatibility.
      [Contributed by SESI]
    - Fixed a bug in houdini_utils::getNodeChain() that caused the
      Offset Level Set, Smooth Level Set and Renormalize Level Set SOPs
      to ignore frame changes.
      [Contributed by SESI]
    - The From Particles SOP now provides the option to write into
      an existing grid.
    - Added a SOP to edit grid metadata.
    - The Fracture SOP now supports multiple cutter objects.
    - Added a To Polygons SOP that complements the Fracture SOP and allows
      for elimination of seam lines, generation of correct vertex normals
      and grouping of polygons when surfacing fracture fragments, using
      the original level set or mesh as a reference.

Version 0.103.1 - January 15 2013
    - tree::ValueAccessor read operations are now faster for four-level trees.
      (Preliminary benchmark tests suggest a 30-40% improvement.)
    - For vector-valued grids, tools::compMin() and tools::compMax()
      now compare vector magnitudes instead of individual components.
    - Migrated grid sampling code to a new file, Interpolation.h,
      and deprecated old files and classes.
    - Added a level-set fracture tool and a Fracture SOP.
    - Added tools::sdfInteriorMask(), which creates a mask of the
      interior region of a level set grid.
    - Fixed a bug in the mesh to volume converter that produced unexpected
      nonzero values for voxels at the intersection of two polygons,
      and another bug that produced narrow-band widths that didn't respect
      the background value when the half-band width was less than three voxels.
    - houdini_utils::ParmFactory can now correctly generate ramp multi-parms.
    - Made various changes for Visual C++ compatibility.
      [Contributed by SESI]
    - The Convert SOP can now convert between signed distance fields and
      fog volumes and from volumes to meshes.
      [Contributed by SESI]
    - For level sets, the From Mesh and From Particles SOPs now match
      the reference grid's narrow-band width.
    - The Scatter SOP can now optionally scatter points in the interior
      of a level set.

Version 0.103.0 - December 21 2012
    - The mesh to volume converter is now 60% faster at generating
      level sets with wide bands, and the From Mesh SOP is now interruptible.
    - Fixed a threading bug in the recently-added compReplace() tool
      that caused it to produce incorrect output.
    - Added a probeConstLeaf() method to the Tree, ValueAccessor and
      node classes.
    - The Houdini VDB primitive doesn't create a "name" attribute
      unnecessarily (i.e., if its grid's name is empty), but it now
      correctly allows the name to be changed to the empty string.
    - Fixed a crash in the Vector Merge SOP when fewer than three grids
      were merged.
    - The From Particles SOP now features a "maximum half-width" parameter
      to help avoid runaway computations.

Version 0.102.0 - December 13 2012
    - Added tools::compReplace(), which copies the active values of one grid
      into another, and added a "Replace A With Active B" mode to the
      Combine SOP.
    - Grid::signedFloodFill() no longer enters an infinite loop when
      filling an empty grid.
    - Fixed a bug in the particle to level set converter that sometimes
      produced level sets with holes, and fixed a bug in the SOP that
      could result in random output.
    - Fixed an issue in the frustum preview feature of the Create SOP
      whereby rendering very large frustums could cause high CPU usage.
    - Added streamline support to the constrained advection scheme
      in the Advect Points SOP.
    - Added an Advect Level Set SOP.

Version 0.101.1 - December 11 2012 (DWA internal release)
    - Partially reverted the Houdini VDB primitive's grid accessor methods
      to their pre-0.98.0 behavior.  A primitive's grid can once again
      be accessed by shared pointer, but now also by reference.
      Accessor methods for grid metadata have also been added, and the
      primitive now ensures that metadata and transforms are never shared.
    - Fixed an intermittent crash in the From Particles SOP.

Version 0.101.0 - December 6 2012 (DWA internal release)
    - Partially reverted the Grid's tree and transform accessor methods
      to their pre-0.98.0 behavior, eliminating copy-on-write but
      preserving their return-by-reference semantics.  These methods
      are now supplemented with a suite of shared pointer accessors.
    - Restructured the mesh to volume converter for a 40% speedup
      and to be more robust to non-manifold geometry, to better preserve
      sharp features, to support arbitrary tree configurations and
      to respect narrow-band limits.
    - Added a getNodeBoundingBox() method to RootNode, InternalNode
      and LeafNode that returns the index space spanned by a node.
    - Made various changes for Visual C++ compatibility.
      [Contributed by SESI]
    - Renamed the Reshape Level Set SOP to Offset Level Set.
    - Fixed a crash in the Convert SOP and added support for conversion
      of empty grids.

Version 0.100.0 - November 30 2012 (DWA internal release)
    - Greatly improved the performance of the level set to fog volume
      converter.
    - Improved the performance of the median filter and of level set
      CSG operations.
    - Reintroduced Tree::pruneLevelSet(), a specialized pruneInactive()
      for level-set grids.
    - Added utilities to the houdini_utils library to facilitate the
      collection of a chain of adjacent nodes of a particular type
      so that they can be cooked in a single step.  (For example,
      adjacent xform SOPs could be collapsed by composing their
      transformation matrices into a single matrix.)
    - Added pruning and flood-filling options to the Convert SOP.
    - Reimplemented the Filter SOP, omitting level-set-specific filters
      and adding node chaining (to reduce memory usage when applying
      several filters in sequence).
    - Added a toggle to the Read SOP to read grid metadata and
      transforms only.
    - Changed the attribute transfer scheme on the From Mesh and
      From Particles SOPs to allow for custom grid names and
      vector type metadata.

Version 0.99.0 - November 21 2012
    - Added Grid methods that return non-const Tree and Transform
      references without triggering deep copies, as well as const
      methods that return const shared pointers.
    - Added Grid methods to populate a grid's metadata with statistics
      like the active voxel count, and to retrieve that metadata.
      By default, statistics are now computed and added to grids
      whenever they are written to .vdb files.
    - Added io::File::readGridMetadata() and io::File::readAllGridMetadata()
      methods to read just the grid metadata and transforms from a .vdb file.
    - Fixed numerical precision issues in the csgUnion, csgIntersection
      and csgDifference tools, and added toggles to optionally disable
      postprocess pruning.
    - Fixed an issue in vdb_view with the ordering of GL vertex buffer calls.
      [Contributed by Bill Katz]
    - Fixed an intermittent crash in the ParticlesToLevelSet tool,
      as well as a race condition that could cause data corruption.
    - The ParticlesToLevelSet tool and From Particles SOP can now
      transfer arbitrary point attribute values from the input particles
      to output voxels.
    - Fixed a bug in the Convert SOP whereby the names of primitives
      were lost during conversion, and another bug that resulted in
      an arithmetic error when converting an empty grid.
    - Fixed a bug in the Combine SOP that caused the Operation selection
      to be lost.

Version 0.98.0 - November 16 2012
    - Tree and Transform objects (and Grid objects in the context of
      Houdini SOPs) are now passed and accessed primarily by reference
      rather than by shared pointer.  See the online documentation for
      details about this important API change.
      [Contributed by SESI]
    - Reimplemented CoordBBox to address several off-by-one bugs
      related to bounding box dimensions.
    - Fixed an off-by-one bug in Grid::evalActiveVoxelBoundingBox().
    - Introduced the LeafManager class, which will eventually replace the
      LeafArray class.  LeafManager supports dynamic buffers stored as
      a structure of arrays (SOA), unlike LeafArray, which supports only
      static buffers stored as an array of structures (AOS).
    - Improved the performance of the LevelSetFilter and LevelSetTracker
      tools by rewriting them to use the new LeafManager class.
    - Added Tree and ValueAccessor setValueOnly() methods, which change
      the value of a voxel without changing its active state, and
      Tree and ValueAccessor probeLeaf() methods that return the leaf node
      that contains a given voxel (unless the voxel is represented by a tile).
    - Added a LevelSetAdvection tool that propagates and tracks
      narrow-band level sets.
    - Introduced a new GridSampler class that supports world-space
      (or index-space) sampling of grid values.
    - Changed the interpretation of the NonlinearFrustumMap's taper
      parameter to be the ratio of the near and far plane depths.
    - Added a ParmFactory::setChoiceList() overload that accepts
      (token, label) string pairs, and a setDefault() overload that
      accepts an STL string.
    - Fixed a crash in the Combine SOP in Copy B mode.
    - Split the Level Set Filter SOP into three separate SOPs,
      Level Set Smooth, Level Set Reshape and Level Set Renormalize.
      When two or more of these nodes are connected in sequence, they interact
      to reduce memory usage: the last node in the sequence performs
      all of the operations in one step.
    - The Advect Points SOP can now output polyline streamlines
      that trace the paths of the points.
    - Added an option to the Analysis SOP to specify names for output grids.
    - Added camera-derived frustum transform support to the Create SOP.

Version 0.97.0 - October 18 2012
    - Added a narrow-band level set interface tracking tool (up to
      fifth-order in space but currently only first-order in time,
      with higher temporal orders to be added soon).
    - Added a level set filter tool to perform unrestricted surface
      smoothing (e.g., Laplacian flow), filtering (e.g., mean value)
      and morphological operations (e.g., morphological opening).
    - Added adaptivity to the level set meshing tool for faster mesh
      extraction with fewer polygons, without postprocessing.
    - Added a ValueAccessor::touchLeaf() method that creates (if necessary)
      and returns the leaf node containing a given voxel.  It can be used
      to preallocate leaf nodes over which to run parallel algorithms.
    - Fixed a bug in Grid::merge() whereby active tiles were sometimes lost.
    - Added LeafManager, which is similar to LeafArray but supports a
      dynamic buffer count and allocates buffers more efficiently.
      Useful for temporal integration (e.g., for level set propagation
      and interface tracking), LeafManager is meant to replace LeafArray,
      which will be deprecated in the next release.
    - Added a LeafNode::fill() method to efficiently populate leaf nodes
      with constant values.
    - Added a Tree::visitActiveBBox() method that applies a functor to the
      bounding boxes of all active tiles and leaf nodes and that can be used
      to improve the performance of ray intersection tests, rendering of
      bounding boxes, etc.
    - Added a Tree::voxelizeActiveTiles() method to densify active tiles.
      While convenient and fast, this can produce large dense grids,
      so use it with caution.
    - Repackaged Tree::pruneLevelSet() as a Tree::pruneOp()-compatible
      functor.  LevelSetPrune is a specialized pruneInactive() for
      level-set grids and is used in interface tracking.
    - Added a GridBase::pruneGrid() method.
    - Added a Grid:hasUniformVoxels() method.
    - Renamed tools::dilate() to tools::dilateVoxels() and improved its
      performance.  The new name reflects the fact that the current
      implementation ignores active tiles.
    - Added a tools::resampleToMatch() function that resamples an input
      grid into an output grid with a different transform such that, after
      resampling, the input and output grids coincide, but the output
      grid's transform is preserved.
    - Significantly improved the performance of depth-bounded value
      iterators (ValueOnIter, ValueAllIter, etc.) when the depth bound
      excludes leaf nodes.
    - Exposed the value buffers inside leaf nodes with LeafNode::buffer().
      This allows for very fast access (const and non-const) to voxel
      values using linear array offsets instead of (i,j,k) coordinates.
    - In openvdb_houdini/UT_VDBTools.h, added operators for use with
      processTypedGrid() that resample grids in several different ways.
    - Added a policy mechanism to houdini_utils::OpFactory that allows for
      customization of operator names, icons, and Help URLs.
    - Renamed many of the Houdini SOPs to make the names more consistent.
    - Added an Advect Points SOP.
    - Added a Level Set Filter SOP that allows for unrestricted surface
      deformations, unlike the older Filter SOP, which restricts surface
      motion to the initial narrow band.
    - Added staggered vector sampling to the Sample Points SOP.
    - Added a minimum radius threshold to the particle voxelization tool
      and SOP.
    - Merged the Composite and CSG SOPs into a single Combine SOP.
    - Added a tool and a SOP to efficiently generate narrow-band level set
      representations of spheres.
    - In the Visualize SOP, improved the performance of tree topology
      generation, which is now enabled by default.

Version 0.96.0 - September 24 2012
    - Fixed a memory corruption bug in the mesh voxelizer tool.
    - Temporarily removed the optional clipping feature from
      the level set mesher.
    - Added "Staggered Vector Field" to the list of grid classes
      in the Create SOP.

Version 0.95.0 - September 20 2012
    - Added a quad meshing tool for higher-quality level set meshing
      and updated the Visualizer SOP to use it.
    - Fixed a precision error in the mesh voxelizer and improved
      the quality of inside/outside voxel classification.
      Output grids are now also tagged as either level sets or fog volumes.
    - Modified the GridResampler to use the signed flood fill optimization
      only on grids that are tagged as level sets.
    - Added a quaternion class to the math library and a method to
      return the trace of a Mat3.
    - Fixed a bug in the ValueAccessor copy constructor that caused
      the copy to reference the original.
    - Fixed a bug in RootNode::setActiveState() that caused a crash
      when marking a (virtual) background voxel as inactive.
    - Added a Tree::pruneLevelSet() method that is similar to but faster than
      pruneInactive() for level set grids.
    - Added fast leaf node voxel access methods that index by linear offset
      (as returned by ValueIter::pos()) instead of by (i, j, k) coordinates.
    - Added a Tree::touchLeaf() method that can be used to preallocate a static
      tree topology over which to safely perform multithreaded processing.
    - Added a grain size argument to the LeafArray class for finer control
      of parallelism.
    - Modified the Makefile to make it easier to omit the doc, vdb_test
      and vdb_view targets.
    - Added utility functions (in houdini/UT_VDBUtils.h) to convert
      between Houdini and OpenVDB matrix and vector types.
      [Contributed by SESI]
    - Added accessors to GEO_PrimVDB that make it easier to directly access
      voxel data and that are used by the HScript volume expression functions
      in Houdini 12.5.
      [Contributed by SESI]
    - As of Houdini 12.1.77, the native transform SOP operates on OpenVDB
      primitives.
      [Contributed by SESI]
    - Added a Convert SOP that converts OpenVDB grids to Houdini volumes
      and vice-versa.

Version 0.94.1 - September 7 2012
    - Fixed bugs in RootNode and InternalNode setValue*() and fill() methods
      that could cause neighboring voxels to become inactive.
    - Fixed a bug in Tree::hasSameTopology() that caused false positives
      when only active states and not values differed.
    - Added a Tree::hasActiveTiles() method.
    - For better cross-platform consistency, substituted bitwise AND
      operations for right shifts in the ValueAccessor hash key computation.
    - vdb_view no longer aborts when asked to surface a vector-valued
      grid--but it still doesn't render the surface.
    - Made various changes for Visual C++ compatibility.
      [Contributed by SESI]
    - Added an option to the MeshVoxelizer SOP to convert both open and
      closed surfaces to unsigned distance fields.
    - The Filter SOP now allows multiple filters to be applied in
      user-specified order.

Version 0.94.0 - August 30 2012
    - Added a method to union just the active states of voxels from
      one grid with those of another grid of a possibly different type.
    - Fixed an incorrect scale factor in the Laplacian diffusion filter.
    - Fixed a bug in Tree::merge that could leave a tree with invalid
      value accessors.
    - Added TreeValueIteratorBase::setActiveState() and deprecated setValueOn().
    - Removed tools/FastSweeping.h.  It will be replaced with a much more
      efficient implementation in the near future.
    - ZLIB compression of .vdb files is now optional, but enabled by default.
      [Contributed by SESI]
    - Made various changes for Clang and Visual C++ compatibility.
      [Contributed by SESI]
    - The MeshVoxelizer SOP can now transfer arbitrary point and
      primitive attribute values from the input mesh to output voxels.

Version 0.93.0 - August 24 2012
    - Renamed symbols in math/Operators.h to avoid ambiguities that
      GCC 4.4 reports as errors.
    - Simplified the API for the stencil version of the
      closest-point transform operator.
    - Added logic to io::Archive::readGrid() to set the grid name metadata
      from the descriptor if the metadata doesn't already exist.
    - Added guards to prevent nesting of openvdb_houdini::Interrupter::start()
      and end() calls.


Version 0.92.0 - August 23 2012
    - Added a Laplacian diffusion filter.
    - Fixed a bug in the initialization of the sparse contour tracer
      that caused mesh-to-volume conversion to fail in certain cases.
    - Fixed a bug in the curvature stencil that caused mean curvature
      filtering to produce wrong results.
    - Increased the speed of the GridTransformer by as much as 20%
      for fog volumes.
    - Added optional pruning to the Resample SOP.
    - Modified the PointSample SOP to allow it to work with ungrouped,
      anonymous grids.
    - Fixed a crash in the LevelSetNoise SOP.

Version 0.91.0 - August 16 2012
    - tools::GridTransformer and tools::GridResampler now correctly
      (but not yet efficiently) process tiles in sparse grids.
    - Added an optional CopyPolicy argument to GridBase::copyGrid()
      and to Grid::copy() that specifies whether and how the grid's tree
      should be copied.
    - Added a GridBase::newTree() method that replaces a grid's tree with
      a new, empty tree of the correct type.
    - Fixed a crash in Tree::setValueOff() when the new value was equal to
      the background value.
    - Fixed bugs in Tree::prune() that could result in output tiles with
      incorrect active states.
    - Added librt to the link dependencies to address build failures on
      Ubuntu systems.
    - Made various small changes to the Makefile and the source code
      that should help with Mac OS X compatibility.
    - The Composite and Resample SOPs now correctly copy the input grid's
      metadata to the output grid.

Version 0.90.1 - August 7 2012
    - Fixed a bug in the BBox::getCenter() method.
    - Added missing header files to various files.
    - io::File::NameIterator::gridName() now returns a unique name of the
      form "name[1]", "name[2]", etc. if a file contains multiple grids with
      the same name.
    - Fixed a bug in the Writer SOP that caused grid names to be discarded.
    - The Resample SOP now correctly sets the background value of the
      output grid.

Version 0.90.0 - August 3 2012 (initial public release)
    - Added a basic GL viewer for OpenVDB files.
    - Greatly improved the performance of two commonly-used Tree methods,
      evalActiveVoxelBoundingBox() and memUsage().
    - Eliminated the GridMap class.  File I/O now uses STL containers
      of grid pointers instead.
    - Refactored stencil-based tools (Gradient, Laplacian, etc.) and rewrote
      some of them for generality and better performance.  Most now behave
      correctly for grids with nonlinear index-to-world transforms.
    - Added a library of index-space finite difference operators.
    - Added a "Hermite" grid type that compactly stores each voxel's upwind
      normals and can be used to convert volumes to and from polygonal meshes.
    - Added a tool (and a Houdini SOP) to scatter points randomly throughout
      a volume.

