/**

@page faq Frequently Asked Questions

@section sFAQContents Contents
- @ref sWhatIsVDB
- @ref sWhyDifferentFromVDB
- @ref sIntegration
- @ref sWhatLicense
- @ref sWhyUseVDB
- @ref sVersionNumbering
- @ref sCustomizeVDB
- @ref sExistingApplications
- @ref sVoxelSize
- @ref sPoints
- @ref sDifferentLeafNodes
- @ref sState
- @ref sVoxel
- @ref sBackground
- @ref sThreadSafe
- @ref sContribute

@section sWhatIsVDB What is OpenVDB Points?
The @b OpenVDB @b Points library provides the ability to efficiently represent point and attribute data in OpenVDB
Grids. Points are spatially-organised into VDB voxels to provide faster access
and a greater opportunity for data compression compared with linear point
arrays. The development of @b OpenVDB @b Points is being led by Dan Bailey at Double Negative and is an active collaboration between Dreamworks Animation and Double Negative.

@section sWhyDifferentFromVDB Why is this library separate from OpenVDB?
The @b OpenVDB @b Points library extends Dreamworks' @b OpenVDB library. The primary reason for this library being separate from OpenVDB is that OpenVDB is now a large, relatively mature toolset with an infrequent release cycle. @b OpenVDB @b Points is very new and can benefit from the flexibility a more frequent release cycle brings and not being tied to the OpenVDB releases. However, by building on top of @b OpenVDB, this library can re-use a lot of the work already in place for the large, open-source OpenVDB toolset and active community of users. Finally, this library is being primarily developed by Double Negative rather than Dreamworks Animation, so this also reduces the effort required in co-ordinating releases between studios.

@section sIntegration Will the library ever be integrated into OpenVDB?
Yes! That is the intention. Once the library has become sufficiently mature and the release cycle less frequent, it is intended to integrate the two codebases and release them together. It is for this reason the OpenVDB Points library mirrors the OpenVDB library so closely in the organization and layout of the repository.

@section sBeta When is the Beta phase due to be over?
There is no set date for ending the beta. Once we feel the library has reached a required level of maturity, we will progress the toolset outside of Beta.

@section sWhatLicense What license is OpenVDB Points distributed under?
OpenVDB Points is released under the Mozilla Public License Version 2.0 (as is OpenVDB), which is a free, open source, and detailed software license developed and maintained by the Mozilla Foundation. It is characterized as a hybridization of the modified BSD license and GNU General Public License (GPL) that seeks to balance the concerns of proprietary and open source developers. For more information about this license, see the
<a href="http://www.mozilla.org/MPL" target="_blank">Mozilla FAQ</a>.

@section sWhyUseVDB Why should I use OpenVDB Points?
The main reason to adopt OpenVDB Points is if you are <b>working with large point sets</b> either for <b>simulation</b> or <b>raytracing</b>, as large point sets can be efficiently stored and traversed in-memory. In addition, OpenVDB Points has proven to be a very compact and easy way of passing point data between different applications. Finally, if you are already relying heavily on @b OpenVDB for volumes and level sets, the shared data topology and toolset makes OpenVDB Points a relatively seamless addition to the pipeline.

@section sVersionNumbering What is the version numbering system for OpenVDB Points?
As with OpenVDB, we currently use a semantic <I>major.minor.patch</I> version numbering system,
and with every release of OpenVDB we change one or more of the three numbers, however the version numbers for OpenVDB Points are different from OpenVDB, instead we intend on supporting a minimum supported version of OpenVDB with each OpenVDB Points release.
The patch number is incremented for new features and bug fixes that change
neither the API nor the file format of the library nor the ABIs of the @c Grid
and @c Transform classes and their constituent classes.
The minor version is incremented for releases that change the API without
changing the @c AttributeArray, @c AttributeSet or @c PointDataLeaf ABIs, and for releases that change
the file format in such a way that older files can still be read.
The major version is incremented when the @c Grid or @c Transform ABIs
change, or when the file format changes in a non-backward-compatible way
(which should be rare). Note that we're not sticking strictly to this during the Beta phase of development.
No release of OpenVDB Points guarantees ABI compatibility across the entire library,
but rather only for the @c Grid classes, and primarily
to allow third-party app plugins compiled against different versions of
the library as well as different versions of OpenVDB to coexist and exchange data.

@section sCustomizeVDB Can I add more attribute compression schemes to OpenVDB Points?
Yes! OpenVDB Points is designed to be extensible towards adding new value compression schemes. The @c AttributeHandle and @c AttributeWriteHandle classes require knowing only the value type of the attribute at compile-time, meaning any existing code written using these handles will still work with new attribute compression schemes provided they are initialized in the same way as other attributes. Adding new attribute compression schemes is not backward-compatible though, so any application code wishing to read attributes with this new scheme will need to be re-compiled to introduce this extra initialization call.

@section sExistingApplications Can I read and write OpenVDB Points in existing applications?
Yes! The only requirement is that the @c PointDataGrid and @c TypedAttributeArrays are initialized before attempting to do this. In Houdini for example, the OpenVDB Points library adds a single SOP to convert OpenVDB Points to Houdini points. With the registration of this SOP in Houdini comes the initialization that provides the ability to use the native Houdini file SOP and Geometry ROP to read and write VDBs that contain OpenVDB Point grids.

@section sVoxelSize What does the voxel size mean for OpenVDB Points?
This is an important aspect of the library to understand. For volumes and level sets, the voxel size is an intuitive way of controlling the tradeoff between the "detail" represented and the size of the data set. However, with OpenVDB Points, the voxel size controls the "detail" in the underlying acceleration structure, not explicitly in the point data itself. This means there is a tradeoff between the amount of memory used to store the underlying VDB topology and the multi-threaded performance due to the granularity of the data. In practice there is a relatively large range of voxel sizes in which the efficiency of the library for storage and traversal will be near-optimal. Outside of this range, either the performance will decrease or the memory will increase. An intuitive way of resolving this confusion is an area we are actively investigating.

@section sPoints Is OpenVDB Points primarily for point data?
Yes! However, the plan is to introduce array-of-array attributes that extends this library to be able to use point attributes to efficiently store curves. See the @subpage roadmap for a better idea of future plans for the library.

@section sDifferentLeafNodes Can I store different numbers and types of attributes per Leaf Node?
Yes! The library is explicitly designed to allow for this. The default usage is such that each @c PointDataLeafNode contains a shared @c AttributeDescriptor with the same attribute names and types, however each leaf can also store a unique @c AttributeDescriptor that isn't shared with other leaves. However, the caveat is that as the most common use case is for an identical @c AttributeDescriptor for all leaves, for performance reasons most tools are designed with this in mind, so new tools would need to be developed if this was restriction was not upheld.

@section sState What are the active state mean for OpenVDB Points?
While, the interpretation of this binary state is application-specific, the most logical interpretation of this for OpenVDB Points is for a voxel that contains points to be active and a voxel that doesn't to be inactive. This makes visiting all voxels in a grid that contains points more efficient as this leverages the sparse iteration of OpenVDB.

@section sVoxel What do voxel values represent in OpenVDB Points?
Voxel values in a @c PointDataLeafNode represent the end position in the linear attribute arrays attached to each leaf. Using the value of the previous voxel (zero for the first voxel), the offset for the start can be deduced. It is recommended to use the ValueIndexIter to simplify the process of iterating through point indices based on voxel values.

@section sBackground What is the background value for OpenVDB Points?
For OpenVDB Points, the background value is always zero. As the voxel value is an offset, allowing a non-zero background value, while theoretically possible is only likely to prove confusing.

@section sThreadSafe Is OpenVDB Points thread-safe?
Yes and no. OpenVDB Points is thread-safe in the same way as OpenVDB. It is worth highlighting that getters and setters for AttributeArrays are thread-safe, however there are faster unsafe getters and setters available which are not thread-safe and used in the AttributeHandles for faster performance.

@section sContribute How can I contribute to OpenVDB Points?
If you have bug reports or ideas for improvements or new features,
please contact us!  If you want to contribute code, please see our
<a href="http://www.openvdb.org/license/index.html" target="_blank">License page</a>.

*/
