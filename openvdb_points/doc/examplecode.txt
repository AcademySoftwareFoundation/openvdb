/**

@page codeExamples OpenVDB Points Cookbook

This section provides code snippets and some complete programs that
illustrate how to use OpenVDB Points and how to perform common tasks.


@section Contents
- @ref sHelloWorld
  - @ref sCompilingHelloWorld
- @ref sPointCreation
- @ref sPointConversion


@section sHelloWorld "Hello, World" for OpenVDB Points
This is a very simple example showing how to convert a std::vector of point positions into a VDB Point Grid and write it out to disk:
@code
#include <openvdb/openvdb.h>
#include <openvdb_points/openvdb.h>
#include <openvdb_points/tools/PointDataGrid.h>
#include <openvdb_points/tools/PointConversion.h>
#include <openvdb_points/tools/PointCount.h>

#include <iostream>

using namespace openvdb::tools;

int main()
{
    // Initialize the OpenVDB and OpenVDB Points library.  This must be called at least
    // once per program and may safely be called multiple times.
    openvdb::initialize();
    openvdb::points::initialize();

    // Create some point positions
    std::vector<openvdb::Vec3f> positions;

    positions.push_back(openvdb::Vec3f(1.2, 4.1, 0.5));
    positions.push_back(openvdb::Vec3f(0.9, 8.1, 3.2));
    positions.push_back(openvdb::Vec3f(-3.6, 1.3, 1.5));
    positions.push_back(openvdb::Vec3f(-3.8, 1.4, 1.51));
    positions.push_back(openvdb::Vec3f(-6.8, -9.1, -3.7));
    positions.push_back(openvdb::Vec3f(1.4, 40302.5, 9.5));

    // Create a linear transform with voxel size of 10.0
    const float voxelSize = 10.0f;
    openvdb::math::Transform::Ptr transform = openvdb::math::Transform::createLinearTransform(voxelSize);

    // Create the PointDataGrid, position attribute is mandatory
    PointDataGrid::Ptr pointDataGrid = createPointDataGrid<PointDataGrid>(
                    positions, TypedAttributeArray<openvdb::Vec3f>::attributeType(), *transform);

    // Output leaf nodes
    std::cout << "Leaf Nodes: " << pointDataGrid->tree().leafCount() << std::endl;

    // Output point count
    std::cout << "Point Count: " << pointCount(pointDataGrid->tree()) << std::endl;

    // Create a VDB file object.
    openvdb::io::File file("mygrids.vdb");

    // Add the grid pointer to a container.
    openvdb::GridPtrVec grids;
    grids.push_back(pointDataGrid);

    // Write out the contents of the container.
    file.write(grids);
    file.close();
}

@endcode
Output:
@code
Leaf Nodes: 3
Point Count: 6
@endcode

@subsection sCompilingHelloWorld Compiling
See the @c Makefile and @c INSTALL file included in this distribution for
details on how to build and install the OpenVDB library.
By default, installation is into the directory tree rooted at
<tt>/tmp/OpenVDB/</tt>, but this can be changed either by editing the value
of the @c DESTDIR variable in the makefile or by setting the desired
value from the command line, as in the following example:
@code
make install DESTDIR=/usr/local
@endcode
Once OpenVDB and OpenVDB Points has been installed, the simplest way to
compile a program like the &ldquo;Hello, World&rdquo; example above is
to examine the commands that are used to build the @c vdb_print tool:
@code
rm vdb_print
make verbose=yes vdb_print
@endcode
and then replace &ldquo;<tt>-o vdb_print</tt>&rdquo; with, for example,
&ldquo;<tt>-o helloworld</tt>&rdquo;
and &ldquo;<tt>cmd/openvdb_print/main.cc</tt>&rdquo;
with &ldquo;<tt>helloworld.cc</tt>&rdquo;.

@section sPointCreation Assemble a VDB Point Grid
This example shows how to create a VDB Points grid with one leaf node and to insert a point per voxel with position only. OpenVDB supports both random access to voxels by coordinates and sequential access by means of iterators.  This example illustrates both types of access:
@code
#include <openvdb/openvdb.h>
#include <openvdb_points/openvdb.h>
#include <openvdb_points/tools/PointDataGrid.h>
#include <openvdb_points/tools/PointCount.h>

#include <iostream>

using namespace openvdb::tools;

int main()
{
    // Initialize the OpenVDB and OpenVDB Points library.  This must be called at least
    // once per program and may safely be called multiple times.
    openvdb::initialize();
    openvdb::points::initialize();

    // Create an empty point data grid
    PointDataGrid::Ptr grid = PointDataGrid::create();

    // Introduce a typedef for our position attribute (note no compression codec here)
    typedef TypedAttributeArray<openvdb::Vec3f> PositionAttribute;

    // Create a list of names and attribute types (in this case, just position)
    AttributeSet::Descriptor::NameAndTypeVec attributes;
    attributes.push_back(AttributeSet::Descriptor::NameAndType("P", PositionAttribute::attributeType()));

    // Create an AttributeSet Descriptor for this list
    AttributeSet::Descriptor::Ptr descriptor = AttributeSet::Descriptor::create(attributes);

    // Touch a leaf at the origin to create it and confirm just one leaf
    PointDataTree::LeafNodeType* leaf = grid->tree().touchLeaf(openvdb::Coord(0, 0, 0));

    std::cout << "Leaf Count: " << grid->tree().leafCount() << std::endl;

    // Decide how many points per voxel we want

    const int pointsPerVoxel = 1;
    const size_t totalPoints = pointsPerVoxel * PointDataTree::LeafNodeType::NUM_VOXELS;

    // Initialize sets up the AttributeSet on the leaf and sizes it
    leaf->initializeAttributes(descriptor, /*arrayLength = */ totalPoints);

    // Values store the end offset of the attribute array for each voxel
    for (size_t i = 0; i < PointDataTree::LeafNodeType::NUM_VOXELS; i++) {
        const uint arrayOffset = (i + 1) * pointsPerVoxel;
        leaf->setOffsetOn(i, arrayOffset);
    }

    // Retrieve a write-able attribute handle for position
    AttributeWriteHandle<openvdb::Vec3f>::Ptr attributeWriteHandle =
        AttributeWriteHandle<openvdb::Vec3f>::create(leaf->attributeArray("P"));

    // Set the point positions to be at the center of each voxel (range is -0.5 -> 0.5)
    for (size_t i = 0; i < totalPoints; i++) {
        attributeWriteHandle->set(i, openvdb::Vec3f(0.0, 0.0, 0.0));
    }

    // Output the total number of points stored in our Point Grid
    std::cout << "Point Count: " << pointCount(grid->tree()) << std::endl;

    std::cout << "Testing random access:" << std::endl;

    // Retrieve a read-only attribute handle for position
    AttributeHandle<openvdb::Vec3f>::Ptr attributeHandle =
        AttributeHandle<openvdb::Vec3f>::create(leaf->attributeArray("P"));

    // Create a co-ordinate to perform the look-up and voxel position in index space
    const openvdb::Coord ijk(4, 0, 0);
    const openvdb::Vec3f voxelIndexSpace = ijk.asVec3d();

    // Retrieve the grid transform
    const openvdb::math::Transform& transform = grid->transform();

    // Create an IndexIter for accessing the co-ordinate (4, 0, 0)
    IndexIter indexIter = leaf->beginIndex(ijk);

    // Iterate over all the points in the (4, 0, 0) voxel
    for (; indexIter; ++indexIter) {
        // Retrieve point position in voxel space
        const openvdb::Vec3f& pointVoxelSpace = attributeHandle->get(*indexIter);

        // Compute point position in index space
        const openvdb::Vec3f pointIndexSpace = pointVoxelSpace + voxelIndexSpace;

        // Compute point position in world space using grid transform
        const openvdb::Vec3f pointWorldSpace = transform.indexToWorld(pointIndexSpace);

        // Output the world space point position
        std::cout << "Point Position[" << *indexIter << "]: " << pointWorldSpace << std::endl;
    }

    std::cout << "Testing sequential access:" << std::endl;

    // Now iterate over all points within all leaves
    for (PointDataTree::LeafCIter iter = grid->tree().cbeginLeaf(); iter; ++iter) {
        AttributeHandle<openvdb::Vec3f>::Ptr attributeHandle =
            AttributeHandle<openvdb::Vec3f>::create(iter->attributeArray("P"));

        for (size_t i = 0; i < totalPoints; i++) {
            /*point position = */ attributeHandle->get(i);

            // see example above for how to compute the world space point position
        }
    }
}

@endcode
Output:
@code
Leaf Count: 1
Point Count: 512
Testing random access:
Point Position[256]: [4, 0, 0]
Testing sequential access:
@endcode

@section sPointConversion Point Conversion
This is a more comprehensive conversion example that demonstrates how to convert points with multiple attributes:
@code
#include <openvdb/openvdb.h>
#include <openvdb_points/openvdb.h>
#include <openvdb_points/tools/PointDataGrid.h>
#include <openvdb_points/tools/PointAttribute.h>
#include <openvdb_points/tools/PointConversion.h>

#include <iostream>

using namespace openvdb::tools;

int main()
{
    // Initialize the OpenVDB and OpenVDB Points library.  This must be called at least
    // once per program and may safely be called multiple times.
    openvdb::initialize();
    openvdb::points::initialize();

    // Create some point positions
    std::vector<openvdb::Vec3f> positions;

    positions.push_back(openvdb::Vec3f(1.2, 4.1, 0.5));
    positions.push_back(openvdb::Vec3f(0.9, 100.1, 3.2));

    // Create a linear transform with voxel size of 10.0
    const float voxelSize = 10.0f;
    openvdb::math::Transform::Ptr transform = openvdb::math::Transform::createLinearTransform(voxelSize);

    std::cout << "Creating VDB Points grid" << std::endl;

    // Create a PointPartitioner-compatible point list using the std::vector wrapper provided
    const PointAttributeVector<openvdb::Vec3f> pointList(positions);

    // Create a PointIndexGrid from the point positions, this extra step is only required
    // as we're adding extra attributes beyond just position and wish to re-use the index ordering
    PointIndexGrid::Ptr pointIndexGrid = createPointIndexGrid<PointIndexGrid>(pointList, *transform);

    // Create the PointDataGrid, position attribute is mandatory
    PointDataGrid::Ptr pointDataGrid = createPointDataGrid<PointDataGrid>(*pointIndexGrid,
                    pointList, TypedAttributeArray<openvdb::Vec3f>::attributeType(), *transform);

    // Retrieve an iterator pointing to the first leaf node
    PointDataTree::LeafCIter iter = pointDataGrid->tree().cbeginLeaf();

    // No leaf nodes means no points, best to always check before dereferencing
    if (!iter)  std::cout << "No Points" << std::endl;

    // Output the number of attributes stored in this leaf node
    std::cout << "Attributes: " << iter->attributeSet().descriptor().size() << std::endl;

    std::cout << "Adding pscale attribute" << std::endl;

    // Add a new pscale attribute
    AttributeSet::Util::NameAndType pscaleAttribute("pscale", TypedAttributeArray<float>::attributeType());

    appendAttribute(pointDataGrid->tree(), pscaleAttribute);

    // Create some point pscale values
    std::vector<float> pscales;

    pscales.push_back(1.1f);
    pscales.push_back(0.9f);

    // Create a point attribute list using the std::vector wrapper provided
    const PointAttributeVector<float> pscalesList(pscales);

    // Now populate the pscale attribute according to these values
    populateAttribute(pointDataGrid->tree(), pointIndexGrid->tree(), "pscale", pscalesList);

    // Output the number of attributes stored in this leaf node
    std::cout << "Attributes: " << iter->attributeSet().descriptor().size() << std::endl;
}

@endcode

*/
