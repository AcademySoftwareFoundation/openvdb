Installing OpenVDB Points
=========================

Requirements
------------
- GNU GCC (gcc.gnu.org), version 4.1 or later
  or Intel ICC (software.intel.com), version 11.1 or later

- GNU gmake (www.gnu.org/software/make/), version 3.81 or later

- Boost (www.boost.org), version 1.42.0 or later
  (Linux: yum install boost-devel; OS X: port install boost +python26)

- libz (zlib.net)
  (Linux: yum install zlib-devel)

- OpenEXR (www.openexr.com), for the 16-bit float Half class in half.h
  and for .exr file output in vdb_render

- Intel Threading Building Blocks (threadingbuildingblocks.org),
  version 3.0 or later

- OpenVDB 3.1.0 (earlier versions may work, but have not been extensively tested).

Other compilers or versions might work but have not been tested.


Optional:

- Doxygen 1.8.7 (www.stack.nl/~dimitri/doxygen/), for documentation

- CppUnit (www.freedesktop.org/wiki/Software/cppunit), version 1.10 or later
  (Linux: yum install cppunit-devel)

- Houdini HDK (ftp://ftp.sidefx.com/public/Houdini12.0), version 12.0.628
  or later

- Blosc compression library (www.blosc.org), version 1.5.0 or later
  (included in the Houdini HDK as of version 14.0)

- Ghostscript (www.ghostscript.com), version 8.70 or later, for documentation
  in PDF format

- pdfLaTeX (www.pdftex.org), version 1.21 or later, for documentation
  in PDF format

Other versions might work but have not been tested.


Installation
------------
1.  Set values appropriate to your environment for the following variables
    at the top of the Makefile:

    DESTDIR             the directory into which to install libraries,
                        executables and header files (e.g., /usr/local)

    OPENVDB_INCL_DIR    the parent directory of the OpenVDB/ header directory
    OPENVDB_LIB_DIR     the directory containing libopenvdb
    OPENVDB_LIB         linker flag(s) for the OpenVDB library (e.g., -lopenvdb)

    BOOST_INCL_DIR      the parent directory of the boost/ header directory
                        (e.g., /usr/include)
    BOOST_LIB_DIR       the directory containing libboost_iostreams, etc.
    BOOST_LIB           linker flags for libboost_iostreams and libboost_system
    BOOST_THREAD_LIB    linker flags for libboost_thread

    ILMBASE_INCL_DIR    the parent directory of the OpenEXR/ header directory
                        (which contains half.h)
    ILMBASE_LIB_DIR     the directory containing libHalf.so and/or libHalf.a
    ILMBASE_LIB         linker flags for libIlmThread, libIex and libImath
    HALF_LIB            linker flag(s) for the Half library (e.g., -lHalf)

    EXR_INCL_DIR        the parent directory of the OpenEXR/ header directory
                        (Note: some OpenEXR headers incorrectly include other
                        OpenEXR headers with, e.g., '#include <ImfName.h>'
                        instead of '#include "ImfName.h"'.  When compiling
                        with Clang, set EXR_INCL_DIR to the parent directory
                        of the OpenEXR/ directory and ILMBASE_INCL_DIR to the
                        OpenEXR/ directory itself to avoid errors.)
    EXR_LIB_DIR         the directory containing libIlmImf
    EXR_LIB             linker flags for libIlmImf

    TBB_INCL_DIR        the parent directory of the tbb/ header directory
    TBB_LIB_DIR         the directory containing libtbb
    TBB_LIB             linker flag(s) for the TBB library (e.g., -ltbb)

    BLOSC_INCL_DIR      the parent directory of the blosc.h header
    BLOSC_LIB_DIR       the directory containing libblosc
    BLOSC_LIB           linker flags for libblosc

    CONCURRENT_MALLOC_LIB_DIR
                        a directory containing a scalable, concurrent malloc
                        replacement library such as jemalloc or TBB malloc
                        (leave blank if no such library is available, but
                        be aware that using standard malloc in concurrent
                        code incurs a significant performance penalty)
    CONCURRENT_MALLOC_LIB
                        linker flag(s) for the malloc replacement library
                        (e.g., -ltbbmalloc_proxy -ltbbmalloc)

    CPPUNIT_INCL_DIR    the parent directory of the cppunit/ header directory
                        (leave blank if CppUnit is not available)
    CPPUNIT_LIB_DIR     the directory containing libcppunit.so or libcppunit.a
    CPPUNIT_LIB         linker flag(s) for the cppunit library
                        (e.g., -lcppunit)

    DOXYGEN             the path to the Doxygen executable
                        (leave blank if Doxygen is unavailable)

    Note that if you plan to build the Houdini OpenVDB Points tools (included
    separately), you must build the OpenVDB Points library and the Houdini tools
    against compatible versions of the Boost, OpenEXR and TBB libraries.
    Fortunately, all three are included in the Houdini HDK, so by default
    several of the variables above reference the Houdini environment variables
    $HDSO, $HFS and $HT.  Source the houdini_setup script provided with
    your Houdini installation to set those environment variables.

    See the INSTALL file included with OpenVDB for potential limitations and
    incompatibility between different versions of Houdini. OpenVDB Points
    respects the same flags regarding ABI compatibility (such as abi=2).

2.  From the top-level openvdb/ directory, type "make" (or "make -s" for
    less verbose output) to locally build the library and commands.
    The Makefile supports parallel builds (e.g. "make -j 8").

    A default local build generates the following libraries and executables
    (but see the Makefile for additional targets and build options)
    openvdb_points/libopenvdb_points.so.0.2.0  the OpenVDB library
    openvdb_points/libopenvdb_points.so        symlink to libopenvdb_points.so.0.2.0
    openvdb_points/vdb_print                   command-line tool that prints info
                                               about OpenVDB .vdb files
    openvdb_points/vdb_test                    unit test runner for libopenvdb_points
                                               (if CppUnit is available)

    From the openvdb/ directory, type "make test" to run the unit tests
    and verify that the library is working correctly.  (Alternatively, once
    the library has been installed (Step 4), run the unit test executable
    directly with "./vdb_test", or "./vdb_test -v" for more verbose output.)

3.  From the openvdb_points/ directory, type "make doc" (or "make -s doc")
    to generate HTML library documentation, then open the file
    openvdb_points/doc/html/index.html in a browser.

4.  From the openvdb_points/ directory, type "make install" (or "make -s install")
    to copy generated files into the directory tree rooted at $(DESTDIR).
    This creates the following distribution:

    $(DESTDIR)/
        bin/
            vdb_print
        include/
            openvdb_points/
                openvdb.h
                tools/
                ...
                version.h
        lib/
            libopenvdb_points.so
            libopenvdb_points.so.0.2
            libopenvdb_points.so.0.2.0

        share/
            doc/
                openvdb/
                    html/
                        index.html
                        ...

EOF
