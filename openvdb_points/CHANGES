OpenVDB Points Version History
==============================

Version 0.2.0 - In Development

    Highlights:
    - Memory-efficient attribute groups and filtering using index iterators.
    - Convenient and faster access to AttributeArrays using AttributeHandles.
    - Improved compression and support for delayed loading optionally managed
      through a new Points Load SOP.
    - Point conversion now handles default attribute values, Vec2s and groups
      from Houdini.
    - Houdini viewport visualization improvements for more native integration.
    - New Clarisse plug-in for OpenVDB Points that performs native ray-tracing
      or geometry scattering.

    New features:
    - Added a method to PointDataLeaf to drop attributes by index.
    - Added the ability to reorder attributes.
    - Added Metadata to the AttributeSet::Descriptor for storing global data.
    - Added AttributeHandles to provide easy read and write access to attribute
      data without being required to know the Codec or storage type.
    - Added an AttributeSet swap method for the PointDataLeaf.
    - Added ability to explicitly set voxel offsets value on PointDataLeaf.
    - Added a method to check if an AttributeArray has the specified value type.
    - Added a fill method to AttributeArray that does not force the array to be
      uniform (unlike collapse).
    - Added a unique name method to the Descriptor for a new attribute array.
    - Appending an attribute to a PointDataLeaf now returns the created array.
    - Added convenience methods to append, drop, count, rename and compress
      attributes in a PointDataTree.
    - Added the ability to specify hidden, transient or group when adding a new
      attribute.
    - Added a GroupAttributeArray derived class for AttributeSet and Descriptor
      (a group being denoted by a single bit of an 8-bit attribute array).
    - Added GroupHandles to provide easy read and write access to attribute
      groups and GroupFilters for attribute filtering.
    - Introduced index iterators to provide consistent array, value and filtered
      iteration in the style of ValueOnCIter.
    - Added ability to append, drop, set and compact groups in a PointDataTree.
    - Added an explicit const attribute array getter to PointDataLeaf.
    - Added uniform value support in AttributeHandles.
    - Introduced unsafe get/set/load methods for attribute data to avoid
      compression and in-core checks to improve performance of AttributeHandles.
    - AttributeArray allocation now uses the private allocate method, previous
      allocate functionality now replaced by an expand method.
    - Added support for attribute default values using Metadata in the
      Descriptor and extended the append and conversion methods.
    - Added ability to compact attributes if all the values are the same.

    Improvements:
    - Introduced continuous integration through Travis, code coverage through
      Codecov, notifications through Slack.
    - Stricter compliance to compile-time warnings using various compilers.
    - Introduced simple profiling tests to the unit tests as a reference.
    - Overhaul of I/O to introduce efficient delayed-loading
      (note that this release is still Beta and not backwards-compatible).
    - Blosc compression now uses size of data type for improved compression.
    - Blosc compression enabled for all uncompressed attributes during I/O.
    - Added new typedefs to be compatible with OpenVDB 3.2 changes.

    Bug fixes:
    - New typeNameAsString specialization for uint16.
    - Introduced the TopologyCopy constructor for PointDataLeaf to match those
      provided by OpenVDB Leaf nodes [Contributed by Rick Hankins].
    - Added a missing Descriptor copy-constructor.
    - Fixed a bug in Descriptor serialization to (correctly) prevent writing
      transient attribute metadata.
    - Fixed a bug where an AttributeArray was copied on write despite being
      retrieved using a non-const getter.
    - Fixed a rare floating-point bug during point position conversion.

    API changes:
    - TypedAttributeArray::hasTypedAttribute<T>() method has been removed, this
      is now exclusively available in AttributeArray.
    - Removed PointDataAccessor which has been replaced by the simpler, more
      convenient index iteration and explicit point counting methods.

    Houdini:
    - Multi-thread the conversion from VDB Points back to Houdini points using
      OpenVDB Points SOP (previously only Houdini -> VDB Points was threaded).
    - Migrate GR Primitive over to being a SOP-style DSO and remove
      libopenvdb_points_houdini.
    - Fixed a race condition threading bug in OpenVDB Points SOP.
    - Extended OpenVDB Points SOP to convert Houdini group information, Vec2 and
      attribute default values when going to and from VDB Points.
    - GR Primitive now draws wireframe leaf bounding boxes for out-of-core leaf
      nodes (to avoid implicit loading when using the viewport).
    - OpenVDB Points SOP no longer expands uniform values on conversion to
      Houdini points and automatically compacts values on conversion back.
    - Blosc compression toggle added to OpenVDB Points SOP for conversion from
      Houdini points.
    - Switched to single-replace menu for OpenVDB Points SOP to allow more
      flexible attribute picking (based on artist feedback).
    - New OpenVDB Points Load SOP that can explicitly load all leaf node data
      when using delayed-loading with optional limit by bounding-box or mask.
    - Modified MMB node output to use locale digit separators.
    - GR Primitive now uses native point shader for viewport visualization
      and correctly uses a light color for dark backgrounds.
    - GR Primitive respects point size and line width preference values in
      viewport visualization.
    - 16-bit half vectors used in viewport visualization to lower GPU memory.
    - Introduced point decorations in the Houdini viewport for velocity,
      normals, marker and position through GR Primitive.
    - Introduced a point decoration in the Houdini viewport for point numbers
      based on an id attribute using GR Primitive.
    - Allow native cache overflowing in viewport visualization for
      GR Primitive [Suggested by Mark Alexander].

    Clarisse:
    - New Isotropix Clarisse ray-tracing module introduced to provide native
      VDB point ray-tracing and geometry instancing.
    - Added support for Clarisse scatterer.
    - Updated Clarisse plug-in to work with API changes in R3+ and R4+.

Version 0.1.0 - October 1, 2015

    Core API:
    - AttributeArray and AttributeSet classes for storing and managing
      attribute data.
    - Extended tree::LeafNode to hold attribute data as new
      tools::PointDataLeaf and introduced tools::PointDataTree and
      tools::PointDataGrid specialisations.
    - Added a PointConversion tool to convert arbitrary point data arrays
      into PointDataGrids and extensible framework to provide custom
      structures for conversion.
    - Added a vdb_print command-line application that matches OpenVDB's
      vdb_print, but with extensions to output point information.

    Houdini:
    - Added an OpenVDB Points SOP for converting point data back-and-forth
      between native Houdini points and OpenVDB Points.
    - A SOP base class that adds middle-click information to OpenVDB Points
      SOPs.
    - A custom GR primitive for rendering OpenVDB Points natively in the
      Houdini viewport.
