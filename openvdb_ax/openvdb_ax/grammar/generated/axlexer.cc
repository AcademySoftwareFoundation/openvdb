
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer ax_create_buffer
#define yy_delete_buffer ax_delete_buffer
#define yy_scan_buffer ax_scan_buffer
#define yy_scan_string ax_scan_string
#define yy_scan_bytes ax_scan_bytes
#define yy_init_buffer ax_init_buffer
#define yy_flush_buffer ax_flush_buffer
#define yy_load_buffer_state ax_load_buffer_state
#define yy_switch_to_buffer ax_switch_to_buffer
#define yypush_buffer_state axpush_buffer_state
#define yypop_buffer_state axpop_buffer_state
#define yyensure_buffer_stack axensure_buffer_stack
#define yy_flex_debug ax_flex_debug
#define yyin axin
#define yyleng axleng
#define yylex axlex
#define yylineno axlineno
#define yyout axout
#define yyrestart axrestart
#define yytext axtext
#define yywrap axwrap
#define yyalloc axalloc
#define yyrealloc axrealloc
#define yyfree axfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define ax_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer ax_create_buffer
#endif

#ifdef yy_delete_buffer
#define ax_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer ax_delete_buffer
#endif

#ifdef yy_scan_buffer
#define ax_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer ax_scan_buffer
#endif

#ifdef yy_scan_string
#define ax_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string ax_scan_string
#endif

#ifdef yy_scan_bytes
#define ax_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes ax_scan_bytes
#endif

#ifdef yy_init_buffer
#define ax_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer ax_init_buffer
#endif

#ifdef yy_flush_buffer
#define ax_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer ax_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define ax_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state ax_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define ax_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer ax_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define axpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state axpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define axpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state axpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define axensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack axensure_buffer_stack
#endif

#ifdef yylex
#define axlex_ALREADY_DEFINED
#else
#define yylex axlex
#endif

#ifdef yyrestart
#define axrestart_ALREADY_DEFINED
#else
#define yyrestart axrestart
#endif

#ifdef yylex_init
#define axlex_init_ALREADY_DEFINED
#else
#define yylex_init axlex_init
#endif

#ifdef yylex_init_extra
#define axlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra axlex_init_extra
#endif

#ifdef yylex_destroy
#define axlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy axlex_destroy
#endif

#ifdef yyget_debug
#define axget_debug_ALREADY_DEFINED
#else
#define yyget_debug axget_debug
#endif

#ifdef yyset_debug
#define axset_debug_ALREADY_DEFINED
#else
#define yyset_debug axset_debug
#endif

#ifdef yyget_extra
#define axget_extra_ALREADY_DEFINED
#else
#define yyget_extra axget_extra
#endif

#ifdef yyset_extra
#define axset_extra_ALREADY_DEFINED
#else
#define yyset_extra axset_extra
#endif

#ifdef yyget_in
#define axget_in_ALREADY_DEFINED
#else
#define yyget_in axget_in
#endif

#ifdef yyset_in
#define axset_in_ALREADY_DEFINED
#else
#define yyset_in axset_in
#endif

#ifdef yyget_out
#define axget_out_ALREADY_DEFINED
#else
#define yyget_out axget_out
#endif

#ifdef yyset_out
#define axset_out_ALREADY_DEFINED
#else
#define yyset_out axset_out
#endif

#ifdef yyget_leng
#define axget_leng_ALREADY_DEFINED
#else
#define yyget_leng axget_leng
#endif

#ifdef yyget_text
#define axget_text_ALREADY_DEFINED
#else
#define yyget_text axget_text
#endif

#ifdef yyget_lineno
#define axget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno axget_lineno
#endif

#ifdef yyset_lineno
#define axset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno axset_lineno
#endif

#ifdef yywrap
#define axwrap_ALREADY_DEFINED
#else
#define yywrap axwrap
#endif

#ifdef yyalloc
#define axalloc_ALREADY_DEFINED
#else
#define yyalloc axalloc
#endif

#ifdef yyrealloc
#define axrealloc_ALREADY_DEFINED
#else
#define yyrealloc axrealloc
#endif

#ifdef yyfree
#define axfree_ALREADY_DEFINED
#else
#define yyfree axfree
#endif

#ifdef yytext
#define axtext_ALREADY_DEFINED
#else
#define yytext axtext
#endif

#ifdef yyleng
#define axleng_ALREADY_DEFINED
#else
#define yyleng axleng
#endif

#ifdef yyin
#define axin_ALREADY_DEFINED
#else
#define yyin axin
#endif

#ifdef yyout
#define axout_ALREADY_DEFINED
#else
#define yyout axout
#endif

#ifdef yy_flex_debug
#define ax_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug ax_flex_debug
#endif

#ifdef yylineno
#define axlineno_ALREADY_DEFINED
#else
#define yylineno axlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
        *yy_cp = (yy_hold_char); \
        YY_RESTORE_YY_MORE_OFFSET \
        (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
    {
    FILE *yy_input_file;

    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;       /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    int yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2

    };
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;      /* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;     /* whether we need to initialize */
static int yy_start = 0;    /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
    { \
    if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
    } \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
    }
#define yy_set_bol(at_bol) \
    { \
    if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
    } \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
    }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define axwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    (yytext_ptr) = yy_bp; \
    yyleng = (int) (yy_cp - yy_bp); \
    (yy_hold_char) = *yy_cp; \
    *yy_cp = '\0'; \
    (yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 123
#define YY_END_OF_BUFFER 124
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
    {
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
    };
static const flex_int16_t yy_accept[326] =
    {   0,
        0,    0,  124,  122,  108,  110,   36,  122,    3,    9,
       12,   40,   41,    7,    5,   37,    6,  122,    8,  113,
      113,  113,   39,    1,   19,    4,   18,   38,    2,  121,
       44,   45,   14,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,   42,
       13,   43,   15,  108,   17,    0,  111,    0,   26,   34,
       27,   24,   32,   22,   33,   23,  118,   51,   50,   49,
       46,   47,   48,  109,   25,  119,  113,    0,  114,  112,
       94,   95,   10,   21,   16,   20,   11,  121,   28,  121,
      121,  121,  121,  121,  121,  121,  121,   67,  121,  121,

      121,   58,   53,  121,  121,  121,  121,  121,  121,   59,
       54,   61,  121,  121,  121,  121,  121,   60,   55,  121,
      121,  121,  121,  121,  121,  121,  121,  121,   57,   52,
      121,  121,  121,  121,   29,   35,  115,  109,  119,  116,
        0,  120,   30,   31,  121,  121,  121,  121,  121,  121,
      121,  101,  121,  121,  121,  121,  121,  121,  106,   66,
      121,  121,  121,  121,   72,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  117,   71,  121,
      106,  101,  121,  121,  121,  121,  121,   62,  102,  121,

      121,  121,  121,  121,  121,  121,  121,  107,  121,  121,
      121,  121,  100,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  104,   63,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
       69,  121,  121,  121,  121,   64,   75,  121,  121,  121,
      102,   73,   74,   88,   87,   90,   89,  121,  121,  121,
      121,   99,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  105,  121,   80,   79,   78,   83,   82,   81,   86,
       85,   84,  121,  121,   68,  121,  121,   76,  121,   56,
       92,  121,  121,   65,  103,   77,  121,  121,  121,  121,

       91,  121,  121,  121,   93,  121,  121,  121,  121,  121,
      121,   70,  121,  121,  121,  121,  121,  121,   96,  121,
      121,  121,   97,   98,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   17,   22,   17,   23,   17,   24,   25,   26,
       27,   28,   29,   30,   31,   31,   31,   31,   32,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   31,   47,   48,   49,   50,
       51,   52,   31,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1,    1,    1,    1,
        4,    3,    1,    1,    1,    1,    4,    4,    4,    4,
        4,    3,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[331] =
    {   0,
        0,    0,  417,  418,  414,  418,  388,   61,  418,  387,
       59,  418,  418,  386,   56,  418,   55,   79,   54,  126,
      382,  381,  418,  418,   45,  383,   46,  418,  418,    0,
      418,  418,  382,   24,   40,   38,   44,  104,  370,   81,
      356,  368,  352,  362,  120,   62,  353,  121,  357,  418,
       49,  418,  418,  399,  418,   74,  418,    0,  418,  418,
      418,  418,  418,  418,  418,  418,  164,  418,  418,  418,
      418,  418,  418,    0,  418,  171,    0,  183,  418,  418,
      418,  418,  373,  418,  418,  418,  372,    0,  418,  347,
      355,  341,  341,  356,  355,  342,  348,  334,  335,  332,

      332,  418,  418,  338,   54,  332,  338,  333,  334,  418,
      418,    0,   58,  331,  325,   68,  324,  418,  418,  327,
       72,   82,  331,  327,  329,  318,  321,   75,  418,  418,
      332,  318,  324,  323,  418,  418,  418,    0,  127,  418,
      198,  166,  418,  418,  320,  329,  324,  323,  311,  309,
       82,  324,  322,  318,  310,  316,  303,  318,  204,    0,
      313,  314,  310,  306,  205,  307,  190,  293,  294,  292,
      294,  296,  303,  289,  108,  288,  290,  287,  298,  297,
       74,  292,  291,  210,  281,  294,  286,  418,    0,  286,
        0,    0,  278,  276,  284,  273,  280,    0,    0,  274,

      284,  270,  302,  304,  301,  271,  265,    0,  269,  296,
      298,  295,    0,  130,  136,  269,  276,  271,  259,  256,
      268,  258,  262,  257,  266,  265,  256,    0,    0,  262,
      251,  251,  256,  251,  191,  192,  198,  247,  241,  254,
        0,  245,  246,  251,  242,    0,    0,  250,  244,  247,
      258,    0,    0,    0,    0,    0,    0,  228,  231,  245,
      234,    0,  242,  239,  241,  236,  224,  233,  239,  234,
      220,    0,  217,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  211,  225,    0,  206,  206,    0,  209,  418,
      239,  216,  202,    0,    0,    0,  201,  212,  205,  211,

      199,  204,  209,  200,    0,  207,  206,  206,  195,  188,
      163,    0,  171,  143,  145,  121,  123,  123,    0,  108,
       98,   86,    0,    0,  418,  265,  267,  271,   90,   87
    } ;

static const flex_int16_t yy_def[331] =
    {   0,
      325,    1,  325,  325,  325,  325,  325,  326,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
       20,   20,  325,  325,  325,  325,  325,  325,  325,  327,
      325,  325,  325,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  325,
      325,  325,  325,  325,  325,  326,  325,  326,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  328,  325,  325,   20,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  327,  325,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  325,  325,  327,  327,  327,  327,  327,  327,  325,
      325,  327,  327,  327,  327,  327,  327,  325,  325,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  325,  325,
      327,  327,  327,  327,  325,  325,  325,  328,  329,  325,
      325,  330,  325,  325,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  325,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  325,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,    0,  325,  325,  325,  325,  325
    } ;

static const flex_int16_t yy_nxt[484] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   21,
       22,   20,   20,   23,   24,   25,   26,   27,   28,   29,
       30,   30,   31,    4,   32,   33,   30,   30,   34,   35,
       36,   37,   38,   30,   39,   40,   30,   41,   42,   30,
       30,   43,   44,   45,   46,   47,   48,   49,   30,   30,
       30,   50,   51,   52,   53,   57,   60,   63,   65,   74,
       83,   84,   86,   87,   90,  135,   91,   93,   57,   97,
       75,   66,   64,   92,   94,   61,  110,   95,   98,  142,
       96,   99,  139,  100,   58,   67,   67,   67,   67,   67,

       67,   67,  101,  124,  158,  164,  125,   58,  159,  102,
      111,  136,  165,  168,  126,  172,  231,   68,  169,  174,
      181,  127,   69,  112,  232,  118,  129,  324,  182,  183,
      113,   70,  173,  103,  175,  194,  195,   71,   72,   73,
       76,  104,   77,   77,   77,   77,   77,   77,   77,  119,
      130,  105,  323,  224,  106,  322,  107,   78,   78,  108,
      321,  320,  131,  225,  120,  121,  132,   78,   78,  140,
      254,  133,  255,   79,  122,  319,  256,  123,  257,   80,
       67,   67,   67,   67,   67,   67,   67,  139,  139,  139,
      139,  139,  139,  139,  141,  318,  141,   78,  317,  142,

      142,  142,  142,  142,  142,  142,  137,   78,  188,  214,
      215,  295,  316,  140,  142,  142,  142,  142,  142,  142,
      142,  203,  210,  204,  211,  205,  212,  191,  235,  236,
      237,  274,  277,  275,  278,  315,  276,  279,  280,  309,
      281,  310,  216,  282,  311,  314,  272,  228,  313,  199,
      312,  272,  308,  272,  228,  307,  306,  295,  305,  304,
      192,  303,  302,  301,  238,   56,  300,   56,   56,   88,
       88,  138,  299,  138,  138,  298,  297,  228,  228,  296,
      295,  295,  295,  294,  293,  292,  291,  290,  199,  289,
      199,  199,  288,  287,  286,  285,  284,  283,  272,  273,

      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  253,  252,  251,  250,  249,
      248,  191,  191,  191,  247,  246,  245,  244,  243,  242,
      192,  192,  241,  240,  191,  239,  234,  233,  230,  229,
      228,  227,  226,  223,  222,  221,  220,  219,  218,  217,
      213,  209,  208,  207,  206,  202,  201,  200,  199,  198,
      197,  196,  193,  192,  192,  191,  190,  189,  187,  186,
      185,  184,  180,  179,  178,  177,  176,  171,  170,  167,
      166,  163,  162,  161,  160,  157,  156,  155,  154,  153,
      152,  151,  150,  149,  148,  147,  146,  145,  144,  143,

       54,  134,  128,  117,  116,  115,  114,  109,   89,   85,
       82,   81,   62,   59,   55,   54,  325,    3,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325
    } ;

static const flex_int16_t yy_chk[484] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    8,   11,   15,   17,   19,
       25,   25,   27,   27,   34,   51,   34,   35,   56,   36,
       19,   17,   15,   34,   35,   11,   40,   35,   36,  330,
       35,   37,  329,   37,    8,   18,   18,   18,   18,   18,

       18,   18,   37,   46,  105,  113,   46,   56,  105,   38,
       40,   51,  113,  116,   46,  121,  181,   18,  116,  122,
      128,   46,   18,   40,  181,   45,   48,  322,  128,  128,
       40,   18,  121,   38,  122,  151,  151,   18,   18,   18,
       20,   38,   20,   20,   20,   20,   20,   20,   20,   45,
       48,   38,  321,  175,   38,  320,   38,   20,  139,   38,
      318,  317,   48,  175,   45,   45,   48,   20,  139,  139,
      214,   48,  214,   20,   45,  316,  215,   45,  215,   20,
       67,   67,   67,   67,   67,   67,   67,   76,   76,   76,
       76,   76,   76,   76,   78,  315,   78,  142,  314,   78,

       78,   78,   78,   78,   78,   78,   67,  142,  142,  167,
      167,  313,  311,   76,  141,  141,  141,  141,  141,  141,
      141,  159,  165,  159,  165,  159,  165,  165,  184,  184,
      184,  235,  236,  235,  236,  310,  235,  236,  237,  301,
      237,  301,  167,  237,  301,  309,  308,  307,  306,  304,
      303,  302,  300,  299,  298,  297,  293,  292,  291,  289,
      287,  286,  284,  283,  184,  326,  273,  326,  326,  327,
      327,  328,  271,  328,  328,  270,  269,  268,  267,  266,
      265,  264,  263,  261,  260,  259,  258,  251,  250,  249,
      248,  245,  244,  243,  242,  240,  239,  238,  234,  233,

      232,  231,  230,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  212,  211,  210,  209,  207,
      206,  205,  204,  203,  202,  201,  200,  197,  196,  195,
      194,  193,  190,  187,  186,  185,  183,  182,  180,  179,
      178,  177,  176,  174,  173,  172,  171,  170,  169,  168,
      166,  164,  163,  162,  161,  158,  157,  156,  155,  154,
      153,  152,  150,  149,  148,  147,  146,  145,  134,  133,
      132,  131,  127,  126,  125,  124,  123,  120,  117,  115,
      114,  109,  108,  107,  106,  104,  101,  100,   99,   98,
       97,   96,   95,   94,   93,   92,   91,   90,   87,   83,

       54,   49,   47,   44,   43,   42,   41,   39,   33,   26,
       22,   21,   14,   10,    7,    5,    3,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
Copyright Contributors to the OpenVDB Project
SPDX-License-Identifier: MPL-2.0

@file grammar/axlexer.l

@authors Nick Avramoussis, Richard Jones

@brief  OpenVDB AX Lexer
*/
    #include "openvdb_ax/ast/Parse.h"
    #include "openvdb_ax/compiler/Logger.h"
    #include "axparser.h" /*generated by bison*/
    #include <openvdb/Platform.h>
    #include <cstdlib>
    #include <errno.h>

    /// @note  Bypasses conversion warnings in YY_CURRENT_BUFFER macro.
    ///        This is a bit over zealous as we only need to suppress
    ///        -Wnull-conversion
    OPENVDB_NO_TYPE_CONVERSION_WARNING_BEGIN

    extern openvdb::ax::Logger* axlog;

    /// @note  Location tracking macro for axlloc token locations.
    ///   YY_USER_ACTION is called before any and each lexer action
    ///   is performed. Instead of manually tracking newlines, we
    ///   can simply scan for them in the current text held by axtext
    #define YY_USER_ACTION \
        assert(axlog); \
        axlloc.first_line = axlloc.last_line; \
        axlloc.first_column = axlloc.last_column; \
        for (int i = 0; axtext[i] != '\0'; i++) { \
            if (axtext[i] == '\n') { \
                axlloc.last_line++; \
                axlloc.last_column = 1; \
            } \
            else { \
                axlloc.last_column++; \
            } \
        }
/* Option 'noyywrap' indicates that when EOF is hit, yyin does not
 * automatically reset to another file.
 */
/* Options 'nounput' and 'noinput' are useful for interactive session
 * support. We don't support or require this.
 */
#define YY_NO_INPUT 1
/* Option 'prefix' creates a C++ lexer with the given prefix, so that
 * we can link with other flex-generated lexers in the same application
 * without name conflicts.
 */
/* Some handy macros which define constant tokens
 */
/* All whitespace bar new lines:
 *   \t tabs, \v vertical tabs, \r carriage return, \f form feed (page break)
 * https://www.regular-expressions.info/refcharacters.html
 */

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

            int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
        { \
        int c = '*'; \
        int n; \
        for ( n = 0; n < max_size && \
                 (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
            buf[n] = (char) c; \
        if ( c == '\n' ) \
            buf[n++] = (char) c; \
        if ( c == EOF && ferror( yyin ) ) \
            YY_FATAL_ERROR( "input in flex scanner failed" ); \
        result = n; \
        } \
    else \
        { \
        errno=0; \
        while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
            { \
            if( errno != EINTR) \
                { \
                YY_FATAL_ERROR( "input in flex scanner failed" ); \
                break; \
                } \
            errno=0; \
            clearerr(yyin); \
            } \
        }\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
    YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
    yy_state_type yy_current_state;
    char *yy_cp, *yy_bp;
    int yy_act;

    if ( !(yy_init) )
        {
        (yy_init) = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! (yy_start) )
            (yy_start) = 1; /* first start state */

        if ( ! yyin )
            yyin = stdin;

        if ( ! yyout )
            yyout = stdout;

        if ( ! YY_CURRENT_BUFFER ) {
            yyensure_buffer_stack ();
            YY_CURRENT_BUFFER_LVALUE =
                yy_create_buffer( yyin, YY_BUF_SIZE );
        }

        yy_load_buffer_state(  );
        }

    {

    while ( /*CONSTCOND*/1 )        /* loops until end-of-file is reached */
        {
        yy_cp = (yy_c_buf_p);

        /* Support of yytext. */
        *yy_cp = (yy_hold_char);

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = (yy_start);
yy_match:
        do
            {
            YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
            if ( yy_accept[yy_current_state] )
                {
                (yy_last_accepting_state) = yy_current_state;
                (yy_last_accepting_cpos) = yy_cp;
                }
            while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 326 )
                    yy_c = yy_meta[yy_c];
                }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
            ++yy_cp;
            }
        while ( yy_base[yy_current_state] != 418 );

yy_find_action:
        yy_act = yy_accept[yy_current_state];
        if ( yy_act == 0 )
            { /* have to back up */
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            yy_act = yy_accept[yy_current_state];
            }

        YY_DO_BEFORE_ACTION;

do_action:  /* This label is used only to access EOF actions. */

        switch ( yy_act )
    { /* beginning of action switch */
            case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = (yy_hold_char);
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            goto yy_find_action;

case 1:
YY_RULE_SETUP
{ return SEMICOLON; }
    YY_BREAK
case 2:
YY_RULE_SETUP
{ return AT; }
    YY_BREAK
case 3:
YY_RULE_SETUP
{ return DOLLAR; }
    YY_BREAK
case 4:
YY_RULE_SETUP
{ return EQUALS; }
    YY_BREAK
case 5:
YY_RULE_SETUP
{ return PLUS; }
    YY_BREAK
case 6:
YY_RULE_SETUP
{ return MINUS; }
    YY_BREAK
case 7:
YY_RULE_SETUP
{ return MULTIPLY; }
    YY_BREAK
case 8:
YY_RULE_SETUP
{ return DIVIDE; }
    YY_BREAK
case 9:
YY_RULE_SETUP
{ return MODULO; }
    YY_BREAK
case 10:
YY_RULE_SETUP
{ return SHIFTLEFT; }
    YY_BREAK
case 11:
YY_RULE_SETUP
{ return SHIFTRIGHT; }
    YY_BREAK
case 12:
YY_RULE_SETUP
{ return BITAND; }
    YY_BREAK
case 13:
YY_RULE_SETUP
{ return BITOR; }
    YY_BREAK
case 14:
YY_RULE_SETUP
{ return BITXOR; }
    YY_BREAK
case 15:
YY_RULE_SETUP
{ return BITNOT; }
    YY_BREAK
case 16:
YY_RULE_SETUP
{ return EQUALSEQUALS; }
    YY_BREAK
case 17:
YY_RULE_SETUP
{ return NOTEQUALS; }
    YY_BREAK
case 18:
YY_RULE_SETUP
{ return MORETHAN; }
    YY_BREAK
case 19:
YY_RULE_SETUP
{ return LESSTHAN; }
    YY_BREAK
case 20:
YY_RULE_SETUP
{ return MORETHANOREQUAL; }
    YY_BREAK
case 21:
YY_RULE_SETUP
{ return LESSTHANOREQUAL; }
    YY_BREAK
case 22:
YY_RULE_SETUP
{ return PLUSEQUALS; }
    YY_BREAK
case 23:
YY_RULE_SETUP
{ return MINUSEQUALS; }
    YY_BREAK
case 24:
YY_RULE_SETUP
{ return MULTIPLYEQUALS; }
    YY_BREAK
case 25:
YY_RULE_SETUP
{ return DIVIDEEQUALS; }
    YY_BREAK
case 26:
YY_RULE_SETUP
{ return MODULOEQUALS; }
    YY_BREAK
case 27:
YY_RULE_SETUP
{ return BITANDEQUALS; }
    YY_BREAK
case 28:
YY_RULE_SETUP
{ return BITXOREQUALS; }
    YY_BREAK
case 29:
YY_RULE_SETUP
{ return BITOREQUALS; }
    YY_BREAK
case 30:
YY_RULE_SETUP
{ return SHIFTLEFTEQUALS; }
    YY_BREAK
case 31:
YY_RULE_SETUP
{ return SHIFTRIGHTEQUALS; }
    YY_BREAK
case 32:
YY_RULE_SETUP
{ return PLUSPLUS; }
    YY_BREAK
case 33:
YY_RULE_SETUP
{ return MINUSMINUS; }
    YY_BREAK
case 34:
YY_RULE_SETUP
{ return AND; }
    YY_BREAK
case 35:
YY_RULE_SETUP
{ return OR; }
    YY_BREAK
case 36:
YY_RULE_SETUP
{ return NOT; }
    YY_BREAK
case 37:
YY_RULE_SETUP
{ return COMMA; }
    YY_BREAK
case 38:
YY_RULE_SETUP
{ return QUESTION; }
    YY_BREAK
case 39:
YY_RULE_SETUP
{ return COLON; }
    YY_BREAK
case 40:
YY_RULE_SETUP
{ return LPARENS; }
    YY_BREAK
case 41:
YY_RULE_SETUP
{ return RPARENS; }
    YY_BREAK
case 42:
YY_RULE_SETUP
{ return LCURLY; }
    YY_BREAK
case 43:
YY_RULE_SETUP
{ return RCURLY; }
    YY_BREAK
case 44:
YY_RULE_SETUP
{ return LSQUARE; }
    YY_BREAK
case 45:
YY_RULE_SETUP
{ return RSQUARE; }
    YY_BREAK
case 46:
YY_RULE_SETUP
{ return DOT_X; }
    YY_BREAK
case 47:
YY_RULE_SETUP
{ return DOT_Y; }
    YY_BREAK
case 48:
YY_RULE_SETUP
{ return DOT_Z; }
    YY_BREAK
case 49:
YY_RULE_SETUP
{ return DOT_X; }
    YY_BREAK
case 50:
YY_RULE_SETUP
{ return DOT_Y; }
    YY_BREAK
case 51:
YY_RULE_SETUP
{ return DOT_Z; }
    YY_BREAK
case 52:
YY_RULE_SETUP
{ return V_AT; }
    YY_BREAK
case 53:
YY_RULE_SETUP
{ return F_AT; }
    YY_BREAK
case 54:
YY_RULE_SETUP
{ return I_AT; }
    YY_BREAK
case 55:
YY_RULE_SETUP
{ return S_AT; }
    YY_BREAK
case 56:
YY_RULE_SETUP
{ return I16_AT; }
    YY_BREAK
case 57:
YY_RULE_SETUP
{ return V_DOLLAR; }
    YY_BREAK
case 58:
YY_RULE_SETUP
{ return F_DOLLAR; }
    YY_BREAK
case 59:
YY_RULE_SETUP
{ return I_DOLLAR; }
    YY_BREAK
case 60:
YY_RULE_SETUP
{ return S_DOLLAR; }
    YY_BREAK
case 61:
YY_RULE_SETUP
{ return IF; }
    YY_BREAK
case 62:
YY_RULE_SETUP
{ return ELSE; }
    YY_BREAK
case 63:
YY_RULE_SETUP
{ return TRUE; }
    YY_BREAK
case 64:
YY_RULE_SETUP
{ return FALSE; }
    YY_BREAK
case 65:
YY_RULE_SETUP
{ return RETURN; }
    YY_BREAK
case 66:
YY_RULE_SETUP
{ return FOR; }
    YY_BREAK
case 67:
YY_RULE_SETUP
{ return DO; }
    YY_BREAK
case 68:
YY_RULE_SETUP
{ return WHILE; }
    YY_BREAK
case 69:
YY_RULE_SETUP
{ return BREAK;}
    YY_BREAK
case 70:
YY_RULE_SETUP
{ return CONTINUE;}
    YY_BREAK
case 71:
YY_RULE_SETUP
{ return BOOL; }
    YY_BREAK
case 72:
YY_RULE_SETUP
{ return INT32; }
    YY_BREAK
case 73:
YY_RULE_SETUP
{ return INT32; }
    YY_BREAK
case 74:
YY_RULE_SETUP
{ return INT64; }
    YY_BREAK
case 75:
YY_RULE_SETUP
{ return FLOAT; }
    YY_BREAK
case 76:
YY_RULE_SETUP
{ return DOUBLE; }
    YY_BREAK
case 77:
YY_RULE_SETUP
{ return STRING; }
    YY_BREAK
case 78:
YY_RULE_SETUP
{ return VEC2I; }
    YY_BREAK
case 79:
YY_RULE_SETUP
{ return VEC2F; }
    YY_BREAK
case 80:
YY_RULE_SETUP
{ return VEC2D; }
    YY_BREAK
case 81:
YY_RULE_SETUP
{ return VEC3I; }
    YY_BREAK
case 82:
YY_RULE_SETUP
{ return VEC3F; }
    YY_BREAK
case 83:
YY_RULE_SETUP
{ return VEC3D; }
    YY_BREAK
case 84:
YY_RULE_SETUP
{ return VEC4I; }
    YY_BREAK
case 85:
YY_RULE_SETUP
{ return VEC4F; }
    YY_BREAK
case 86:
YY_RULE_SETUP
{ return VEC4D; }
    YY_BREAK
case 87:
YY_RULE_SETUP
{ return MAT3F; }
    YY_BREAK
case 88:
YY_RULE_SETUP
{ return MAT3D; }
    YY_BREAK
case 89:
YY_RULE_SETUP
{ return MAT4F; }
    YY_BREAK
case 90:
YY_RULE_SETUP
{ return MAT4D; }
    YY_BREAK
/*Tokens to support VEX Syntax*/
case 91:
YY_RULE_SETUP
{ return VEC3F; } /*VEX SUPPORT TOKENS*/
    YY_BREAK
case 92:
YY_RULE_SETUP
{ return MAT4F; }
    YY_BREAK
case 93:
YY_RULE_SETUP
{ return MAT3F; }
    YY_BREAK
case 94:
YY_RULE_SETUP
{ return M3F_AT; }
    YY_BREAK
case 95:
YY_RULE_SETUP
{ return M4F_AT; }
    YY_BREAK
/*Deprecated Tokens*/
case 96:
YY_RULE_SETUP
{  axlog->warning("vectorint keyword is deprecated. use vec3i.",
                                    {axlloc.first_line, axlloc.first_column});
                                return VEC3I;
                            }
    YY_BREAK
case 97:
YY_RULE_SETUP
{  axlog->warning("vectorfloat keyword is deprecated. use vec3f.",
                                    {axlloc.first_line, axlloc.first_column});
                                return VEC3F;
                            }
    YY_BREAK
case 98:
YY_RULE_SETUP
{  axlog->warning("vectordouble keyword is deprecated. use vec3d.",
                                    {axlloc.first_line, axlloc.first_column});
                                return VEC3D;
                            }
    YY_BREAK
case 99:
YY_RULE_SETUP
{  axlog->warning("short local variables have been removed. use int, int32 or int64.",
                                    {axlloc.first_line, axlloc.first_column});
                                return INT32;
                            }
    YY_BREAK
case 100:
YY_RULE_SETUP
{  axlog->warning("long keyword is deprecated. use int64.",
                                    {axlloc.first_line, axlloc.first_column});
                                return INT64;
                            }
    YY_BREAK
/* Reserved keywords */
case 101:
case 102:
case 103:
case 104:
case 105:
case 106:
case 107:
YY_RULE_SETUP
{
    /* @todo: move this into parser */
    std::ostringstream os;
    os <<"\""<< axtext << "\" is a reserved keyword.";
    axlog->error(os.str(), {axlloc.first_line, axlloc.first_column});
}
    YY_BREAK
case 108:
YY_RULE_SETUP
{ } /* ignore whitespace */
    YY_BREAK
case 109:
YY_RULE_SETUP
{ } /* ignore //-style one-line comments */
    YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{ } /* ignore newlines */
    YY_BREAK
case 111:
YY_RULE_SETUP
{
                                axlval.string = strndup(axtext+1, axleng-2);
                                return L_STRING;
                            }
    YY_BREAK
case 112:
YY_RULE_SETUP
{
                                axlog->warning("s suffix is deprecated.", {axlloc.first_line, axlloc.first_column});
                                errno = 0;
                                axlval.index = uint64_t(std::strtoull(axtext, /*end*/nullptr, /*base*/10));
                                if (errno == ERANGE) {
                                    errno = 0;
                                    axlog->error("integer constant is too large to be represented:",
                                        {axlloc.first_line, axlloc.first_column});
                                }
                                return L_INT32;
                            }
    YY_BREAK
case 113:
YY_RULE_SETUP
{
                                errno = 0;
                                axlval.index = uint64_t(std::strtoull(axtext, /*end*/nullptr, /*base*/10));
                                if (errno == ERANGE) {
                                    errno = 0;
                                    axlog->error("integer constant is too large to be represented:",
                                        {axlloc.first_line, axlloc.first_column});
                                }

                                return L_INT32;
                            }
    YY_BREAK
case 114:
YY_RULE_SETUP
{
                                errno = 0;
                                axlval.index = uint64_t(std::strtoull(axtext, /*end*/nullptr, /*base*/10));
                                if (errno == ERANGE) {
                                    errno = 0;
                                    axlog->error("integer constant is too large to be represented:",
                                        {axlloc.first_line, axlloc.first_column});
                                }
                                return L_INT64;
                            }
    YY_BREAK
case 115:
case 116:
case 117:
YY_RULE_SETUP
{
                                    errno = 0;
                                    axlval.flt = static_cast<double>(std::strtof(axtext, /*end*/nullptr));
                                    if (errno == ERANGE) {
                                        errno = 0;
                                        if (std::isinf(axlval.flt)) {
                                            axlog->warning("floating point constant is too large for type float, "
                                                "will be converted to inf.", {axlloc.first_line, axlloc.first_column});
                                        }
                                        else if (axlval.flt == 0.0) {
                                            axlog->warning("floating point constant truncated to zero.",
                                                {axlloc.first_line, axlloc.first_column});
                                        }
                                        else {
                                            axlog->warning("floating point constant is too small for type float "
                                                "and may underflow.", {axlloc.first_line, axlloc.first_column});
                                        }
                                    }
                                    return L_FLOAT;
                                }
    YY_BREAK
case 118:
case 119:
case 120:
YY_RULE_SETUP
{
                                    errno = 0;
                                    axlval.flt = std::strtod(axtext, /*end*/nullptr);
                                    if (errno == ERANGE) {
                                        errno = 0;
                                        if (std::isinf(axlval.flt)) {
                                            axlog->warning("floating point constant is too large for type double, "
                                                "will be converted to inf.", {axlloc.first_line, axlloc.first_column});
                                        }
                                        else if (axlval.flt == 0.0) {
                                            axlog->warning("floating point constant truncated to zero.",
                                                {axlloc.first_line, axlloc.first_column});
                                        }
                                        else {
                                            axlog->warning("floating point constant is too small for type double "
                                                "and may underflow.", {axlloc.first_line, axlloc.first_column});
                                        }
                                    }
                                    return L_DOUBLE;
                                }
    YY_BREAK
case 121:
YY_RULE_SETUP
{
                                            axlval.string = strdup(axtext);
                                            return IDENTIFIER;
                                        }
    YY_BREAK
case 122:
YY_RULE_SETUP
{
                                /* error on everything else */
                                /* @todo: move this into parser */
                                assert(axlog);
                                axlog->error("stray or invalid character.",
                                        {axlloc.first_line, axlloc.first_column});

                            }
    YY_BREAK
case 123:
YY_RULE_SETUP
ECHO;
    YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = (yy_hold_char);
        YY_RESTORE_YY_MORE_OFFSET

        if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between YY_CURRENT_BUFFER and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
            YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state(  );

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = (yytext_ptr) + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++(yy_c_buf_p);
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
                yy_cp = (yy_c_buf_p);
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer(  ) )
            {
            case EOB_ACT_END_OF_FILE:
                {
                (yy_did_buffer_switch_on_eof) = 0;

                if ( yywrap(  ) )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! (yy_did_buffer_switch_on_eof) )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) =
                    (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state(  );

                yy_cp = (yy_c_buf_p);
                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                (yy_c_buf_p) =
                &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                yy_current_state = yy_get_previous_state(  );

                yy_cp = (yy_c_buf_p);
                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
        char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    char *source = (yytext_ptr);
    int number_to_move, i;
    int ret_val;

    if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
            {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

    else
        {
            int num_to_read =
            YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

            int yy_c_buf_p_offset =
                (int) ((yy_c_buf_p) - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yyrealloc( (void *) b->yy_ch_buf,
                             (yy_size_t) (b->yy_buf_size + 2)  );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = NULL;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                        number_to_move - 1;

            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
            (yy_n_chars), num_to_read );

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
        }

    if ( (yy_n_chars) == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin  );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        /* Extend the array by 50%, plus the number we really need. */
        int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
            (void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
        if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
            YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
        /* "- 2" to take care of EOB's */
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
    }

    (yy_n_chars) += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

    (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
    yy_state_type yy_current_state;
    char *yy_cp;

    yy_current_state = (yy_start);

    for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
        {
        YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if ( yy_accept[yy_current_state] )
            {
            (yy_last_accepting_state) = yy_current_state;
            (yy_last_accepting_cpos) = yy_cp;
            }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
            {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 326 )
                yy_c = yy_meta[yy_c];
            }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
    int yy_is_jam;
        char *yy_cp = (yy_c_buf_p);

    YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
        {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
        }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 326 )
            yy_c = yy_meta[yy_c];
        }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 325);

        return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
            *(yy_c_buf_p) = '\0';

        else
            { /* need more input */
            int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
                {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart( yyin );

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap(  ) )
                        return 0;

                    if ( ! (yy_did_buffer_switch_on_eof) )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
                }
            }
        }

    c = *(unsigned char *) (yy_c_buf_p);    /* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';   /* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    return c;
}
#endif  /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
    }

    yy_init_buffer( YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *      yypop_buffer_state();
     *      yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
        return;

    if ( YY_CURRENT_BUFFER )
        {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
        }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state(  );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
        return;

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yyfree( (void *) b->yy_ch_buf  );

    yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
    int oerrno = errno;

    yy_flush_buffer( b );

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
        if ( ! b )
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == YY_CURRENT_BUFFER )
        yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
        if (new_buffer == NULL)
        return;

    yyensure_buffer_stack();

    /* This block is copied from yy_switch_to_buffer. */
    if ( YY_CURRENT_BUFFER )
        {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
        }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
        (yy_buffer_stack_top)++;
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state(  );
    (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
        if (!YY_CURRENT_BUFFER)
        return;

    yy_delete_buffer(YY_CURRENT_BUFFER );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if ((yy_buffer_stack_top) > 0)
        --(yy_buffer_stack_top);

    if (YY_CURRENT_BUFFER) {
        yy_load_buffer_state(  );
        (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
    yy_size_t num_to_alloc;

    if (!(yy_buffer_stack)) {

        /* First allocation is just for 2 elements, since we don't know if this
         * scanner will even need a stack. We use 2 instead of 1 to avoid an
         * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
        (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                                (num_to_alloc * sizeof(struct yy_buffer_state*)
                                );
        if ( ! (yy_buffer_stack) )
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

        memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

        (yy_buffer_stack_max) = num_to_alloc;
        (yy_buffer_stack_top) = 0;
        return;
    }

    if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

        /* Increase the buffer to prepare for a possible push. */
        yy_size_t grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = (yy_buffer_stack_max) + grow_size;
        (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                                ((yy_buffer_stack),
                                num_to_alloc * sizeof(struct yy_buffer_state*)
                                );
        if ( ! (yy_buffer_stack) )
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

        /* zero only the new slots.*/
        memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
        (yy_buffer_stack_max) = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
    YY_BUFFER_STATE b;

    if ( size < 2 ||
         base[size-2] != YY_END_OF_BUFFER_CHAR ||
         base[size-1] != YY_END_OF_BUFFER_CHAR )
        /* They forgot to leave room for the EOB's. */
        return NULL;

    b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

    b->yy_buf_size = (int) (size - 2);  /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = NULL;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer( b  );

    return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{

    return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    int i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = (yy_size_t) (_yybytes_len + 2);
    buf = (char *) yyalloc( n  );
    if ( ! buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

    for ( i = 0; i < _yybytes_len; ++i )
        buf[i] = yybytes[i];

    buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer( buf, n );
    if ( ! b )
        YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
            fprintf( stderr, "%s\n", msg );
    exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
        yytext[yyleng] = (yy_hold_char); \
        (yy_c_buf_p) = yytext + yyless_macro_arg; \
        (yy_hold_char) = *(yy_c_buf_p); \
        *(yy_c_buf_p) = '\0'; \
        yyleng = yyless_macro_arg; \
        } \
    while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 *
 */
void yyset_lineno (int  _line_number )
{

    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
    while(YY_CURRENT_BUFFER){
        yy_delete_buffer( YY_CURRENT_BUFFER  );
        YY_CURRENT_BUFFER_LVALUE = NULL;
        yypop_buffer_state();
    }

    /* Destroy the stack itself. */
    yyfree((yy_buffer_stack) );
    (yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{

    int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
    int n;
    for ( n = 0; s[n]; ++n )
        ;

    return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
            return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{

    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return realloc(ptr, size);
}

void yyfree (void * ptr )
{
            free( (char *) ptr );   /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

OPENVDB_NO_TYPE_CONVERSION_WARNING_END


