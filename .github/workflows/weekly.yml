# This workflow runs once a week and tests a variety of configurations,
# dependencies and other specific or expensive checkes (sanitizers).
# It also contains the Houdini Cache jobs which update the CI cache
# with new Houdini releases.

name: Weekly

on:
  schedule:
    # run this workflow Sunday 00:00 UTC
    - cron:  '0 0 * * 0'
  workflow_dispatch:
    inputs:
      type:
        description: 'The type of CI to run (all, houdini, sanitize, mac, extra, ax, blosc, abi)'
        required: true
        default: 'all'

jobs:
  #############################################################################
  ################################## Houdini ##################################
  #############################################################################

  # Check that valid github secrets have been set for the ability to
  # download Houdini and cache it. The secrets are used in download_houdini.py
  checksecret:
    name: Verify Houdini Secrets
    runs-on: ubuntu-latest
    outputs:
      HOUDINI_SECRETS: ${{ steps.check.outputs.HOUDINI_SECRETS }}
    steps:
      - id: check
        env:
            HOUDINI_CLIENT_ID: ${{ secrets.HOUDINI_CLIENT_ID }}
            HOUDINI_SECRET_KEY: ${{ secrets.HOUDINI_SECRET_KEY }}
        run: echo "::set-output name=HOUDINI_SECRETS::${{ env.HOUDINI_CLIENT_ID != '' && env.HOUDINI_SECRET_KEY != '' }}"
      - name: Skip Next Jobs
        if: steps.check.outputs.HOUDINI_SECRETS != 'true'
        run: echo "HOUDINI_CLIENT_ID and HOUDINI_SECRET_KEY GitHub Action Secrets needs to be set to install Houdini builds"

  # download the latest production version of Houdini 18.5, strip out headers,
  # libraries and binaries required for building OpenVDB and if the build
  # succeeds, put it into the GitHub Actions cache
  linux_houdini18_5:
    needs: [checksecret]
    if: |
      (needs.checksecret.outputs.HOUDINI_SECRETS == 'true' ||
      github.repository_owner == 'AcademySoftwareFoundation') &&
      (github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'houdini')
    runs-on: ubuntu-latest
    env:
      CXX: clang++
      HOUDINI_CLIENT_ID: ${{ secrets.HOUDINI_CLIENT_ID }}
      HOUDINI_SECRET_KEY: ${{ secrets.HOUDINI_SECRET_KEY }}
    container:
      image: aswf/ci-base:2020
    steps:
    - uses: actions/checkout@v2
    - name: timestamp
      id: timestamp
      shell: bash
      run: echo "::set-output name=timestamp::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
    - name: download_houdini
      run: ./ci/download_houdini.sh 18.5 ON
    - name: install_houdini
      run: |
        mkdir $HOME/houdini_install
        cp hou/hou.tar.gz $HOME/houdini_install/hou.tar.gz
        cd $HOME/houdini_install && tar -xzf hou.tar.gz && cd -
    - name: build
      shell: bash
      run: >
        cd $HOME/houdini_install/hou && source houdini_setup_bash && cd - &&
        ./ci/build.sh -v
        --build-type=Release
        --components="core,hou,bin,view,render,python,test,axcore,axbin,axtest"
        --cargs=\"-DDISABLE_CMAKE_SEARCH_PATHS=ON -DOPENVDB_BUILD_HOUDINI_ABITESTS=ON -DOPENVDB_HOUDINI_INSTALL_PREFIX=/tmp\"
    - name: test
      run: cd build && ctest -V
    - name: write_houdini_cache
      uses: actions/cache@v2
      with:
        path: hou
        key: vdb-v5-houdini18_5-${{ steps.timestamp.outputs.timestamp }}

  # download the latest production version of Houdini 19.0, strip out headers,
  # libraries and binaries required for building OpenVDB and if the build
  # succeeds, put it into the GitHub Actions cache
  linux_houdini19_0:
    needs: [checksecret]
    if: |
      (needs.checksecret.outputs.HOUDINI_SECRETS == 'true' ||
      github.repository_owner == 'AcademySoftwareFoundation') &&
      (github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'houdini')
    runs-on: ubuntu-latest
    env:
      CXX: clang++
      HOUDINI_CLIENT_ID: ${{ secrets.HOUDINI_CLIENT_ID }}
      HOUDINI_SECRET_KEY: ${{ secrets.HOUDINI_SECRET_KEY }}
    container:
      image: aswf/ci-base:2020
    steps:
    - uses: actions/checkout@v2
    - name: timestamp
      id: timestamp
      shell: bash
      run: echo "::set-output name=timestamp::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
    - name: download_houdini
      run: ./ci/download_houdini.sh 19.0 ON
    - name: install_houdini
      run: |
        mkdir $HOME/houdini_install
        cp hou/hou.tar.gz $HOME/houdini_install/hou.tar.gz
        cd $HOME/houdini_install && tar -xzf hou.tar.gz && cd -
    - name: build
      shell: bash
      run: >
        cd $HOME/houdini_install/hou && source houdini_setup_bash && cd - &&
        ./ci/build.sh -v
        --build-type=Release
        --components="core,hou,bin,view,render,python,test,axcore,axbin,axtest"
        --cargs=\"-DDISABLE_CMAKE_SEARCH_PATHS=ON -DOPENVDB_BUILD_HOUDINI_ABITESTS=ON -DOPENVDB_HOUDINI_INSTALL_PREFIX=/tmp\"
    - name: test
      run: cd build && ctest -V
    - name: write_houdini_cache
      uses: actions/cache@v2
      with:
        path: hou
        key: vdb-v5-houdini19_0-${{ steps.timestamp.outputs.timestamp }}

  #############################################################################
  ################################ Sanitizers #################################
  #############################################################################

  # This workflow is for running various sanitizers on OpenVDB. We currently
  # only use clang over gcc (for no particular reason). Note that some of the
  # errors produces by these sanitizers may be fairly obscure as the
  # llvm-symbolizer is not installed on the openvdb image. The address
  # sanitizer should never fail.
  linux-sanitizers:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'sanitize'
    runs-on: ubuntu-latest
    name: linux-clang-sanitizer:${{ matrix.config.build }}
    container:
      image: aswf/ci-openvdb:2021
    env:
      CXX: clang++
    strategy:
      matrix:
        config:
          - { build: 'asan',  components: 'core,test,nano,nanotest,axcore,axtest', cmake: '-DUSE_BLOSC=OFF' } # We never called blosc_destroy(), so disable blosc to silence these errors
          - { build: 'ubsan', components: 'core,test,axcore,axtest', cmake: '' } # Doesn't currently test NanoVDB
          #- { build: 'lsan', cmake: '' } # asan encompasses and includes lsan
          #- { build: 'tsan', cmake: '' } # requires full stack rebuild for valid results (including libc++)
          #- { build: 'msan', cmake: '' } # requires full stack rebuild for valid results (including libc++)
          #- { build: 'coverage', cmake: '' } # todo
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: build
      run: >
        ./ci/build.sh -v
        --build-type=${{ matrix.config.build }}
        --components="${{ matrix.config.components }}"
        --cargs=\"
        -DOPENVDB_CORE_STATIC=OFF
        -DOPENVDB_AX_STATIC=OFF
        -DNANOVDB_USE_OPENVDB=ON
        -DCMAKE_INSTALL_PREFIX=`pwd`
        ${{ matrix.config.cmake }}
        \"
    - name: test
      run: cd build && ctest -V

  #############################################################################
  ########################### Core Library Extras #############################
  #############################################################################

  # Extra configuration tests for the OpenVDB Core library
  linux-extra:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'extra'
    runs-on: ubuntu-latest
    name: linux-extra:${{ matrix.config.name }}
    container:
      image: aswf/ci-openvdb:2022-clang11
    env:
      CXX: clang++
    strategy:
      matrix:
        config:
          - { name: 'all',  cmake: '-DUSE_BLOSC=ON  -DUSE_ZLIB=ON  -DUSE_EXR=ON  -DUSE_PNG=ON'  }
          - { name: 'lite', cmake: '-DUSE_BLOSC=OFF -DUSE_ZLIB=OFF -DUSE_EXR=OFF -DUSE_PNG=OFF' }
          - { name: 'half', cmake: '-DUSE_BLOSC=OFF -DUSE_IMATH_HALF=ON' }
          - { name: 'sse',  cmake: '-DOPENVDB_SIMD=SSE42' }
          - { name: 'avx',  cmake: '-DOPENVDB_SIMD=AVX' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: build
      run: >
        ./ci/build.sh -v
        --build-type=Release
        --components=\"core,python,bin,view,render,test\"
        --cargs=\"-DOPENVDB_CXX_STRICT=ON -DOPENVDB_ABI_VERSION_NUMBER=9 ${{ matrix.config.cmake }}\"
    - name: test
      run: cd build && ctest -V

  # Extra compiler tests
  linux-cxx17:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'extra'
    runs-on: ubuntu-20.04
    name: linux-cxx17:${{ matrix.config.cxx }}
    env:
      CXX: ${{ matrix.config.cxx }}
    strategy:
      matrix:
        config:
          - { cxx: 'g++-10',     j: '1' }
          - { cxx: 'clang++-10', j: '2' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: update_apt
      run: sudo apt-get update
    - name: install
      run: >
        sudo apt-get -q install -y
        libboost-dev libboost-system-dev libboost-iostreams-dev libboost-python-dev
        libglfw3-dev libtbb-dev libgtest-dev libcppunit-dev libglu1-mesa-dev
    - name: build
      run: >
        ./ci/build.sh -v
        --build-type=Release
        -j ${{ matrix.config.j }}
        --components=\"core,python,test,bin,view,render,axcore,axbin,axtest\"
        --cargs=\"
        -DUSE_BLOSC=OFF
        -DCMAKE_CXX_STANDARD=17
        -DOPENVDB_ABI_VERSION_NUMBER=9
        -DCMAKE_INSTALL_PREFIX=`pwd`
        \"
    - name: test
      run: cd build && ctest -V

  # Test EXR 3 and TBB 2021 on MacOS
  test-macos-11:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'mac'
    runs-on: macos-11
    env:
      CXX: clang++
    steps:
    - uses: actions/checkout@v2
    - name: install
      shell: bash
      run: |
        brew update
        brew install bash gnu-getopt cmake imath openexr boost tbb glfw googletest
        echo "/usr/local/opt/gnu-getopt/bin" >> $GITHUB_PATH
    - name: build
      shell: bash
      run: >
        ./ci/build.sh -v
        --build-type=Release
        --components=\"core,bin,view,render,test\"
        --cargs=\"-DOPENVDB_CXX_STRICT=OFF -DUSE_BLOSC=OFF -DUSE_ZLIB=OFF\"
    - name: test
      shell: bash
      run: cd build && ctest -V

  test-macos-1015:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'mac'
    runs-on: macos-10.15
    env:
      CXX: clang++
    steps:
    - uses: actions/checkout@v2
    - name: install
      shell: bash
      # brew boost-python3 installs a "Keg-only" version of python which is
      # not installed to PATH. We must manually provide the location of the
      # required python installation to CMake through a hint variable which
      # is exported in install_macos.sh
      run: ./ci/install_macos.sh
    - name: install
      shell: bash
      run: ./ci/install_blosc.sh 1.5.0
    - name: build
      shell: bash
      # Also need to disable compiler warnings for ABI 6 and above due to
      # the version of clang installed
      run: >
        ./ci/build.sh -v
        --build-type=Release
        --components=\"core,python,bin,view,render,test\"
        --cargs=\"-DOPENVDB_CXX_STRICT=OFF -DOPENVDB_ABI_VERSION_NUMBER=9 -DOPENVDB_SIMD=SSE42\"
    - name: test
      shell: bash
      run: cd build && ctest -V

  #############################################################################
  ############################ AX Library Extras ##############################
  #############################################################################

  linux-ax:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'ax'
    runs-on: ubuntu-latest
    name: >
      linux-ax:${{ matrix.config.image }}-cxx:${{ matrix.config.cxx }}-${{ matrix.config.build }}
    container:
      image: aswf/ci-openvdb:${{ matrix.config.image }}
    env:
      CXX: ${{ matrix.config.cxx }}
    strategy:
      matrix:
        config:
          # Unified
          - { image: '2020-clang7',  cxx: 'clang++', build: 'Release', j: '2', components: 'core,bin,axcore,axbin,axtest' }
          - { image: '2020-clang7',  cxx: 'g++',     build: 'Release', j: '1', components: 'core,bin,axcore,axbin,axtest' }
          # Standalone
          - { image: '2021-clang10', cxx: 'clang++', build: 'Release', j: '2', components: 'core' }
          - { image: '2022-clang11', cxx: 'clang++', build: 'Debug',   j: '2', components: 'core' }
          - { image: '2022-clang11', cxx: 'clang++', build: 'Release', j: '2', components: 'core' }
          - { image: '2022-clang11', cxx: 'g++',     build: 'Release', j: '1', components: 'core' }
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: >
          ./ci/build.sh -v
          -j ${{ matrix.config.j }}
          --build-type=${{ matrix.config.build }}
          --components=${{ matrix.config.components }}
          --cargs=\"
          -DOPENVDB_AX_TEST_CMD_DOWNLOADS=ON
          -DUSE_EXPLICIT_INSTANTIATION=OFF
          -DOPENVDB_CXX_STRICT=ON
          \"
      - name: clean
        if: matrix.config.components == 'core'
        run: rm -rf build
      - name: build
        if: matrix.config.components == 'core'
        run: >
          ./ci/build.sh -v
          -j ${{ matrix.config.j }}
          --build-type=${{ matrix.config.build }}
          --components="bin,axcore,axbin,axtest"
          --cargs=\"
          -DOPENVDB_AX_TEST_CMD_DOWNLOADS=ON
          -DUSE_EXPLICIT_INSTANTIATION=OFF
          -DOPENVDB_CXX_STRICT=ON
          \"
      - name: test
        run: cd build && ctest -V
      - name: test_doxygen_examples
        run: ./ci/extract_test_examples.sh

  macos-ax:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'ax'
    runs-on: macos-11
    name: macos-cxx:${{ matrix.config.cxx }}-llvm:${{ matrix.config.llvm }}-${{ matrix.config.build }}
    env:
      CXX: ${{ matrix.config.cxx }}
    strategy:
      matrix:
        config:
          - { cxx: 'g++',     build: 'Release', llvm: '8'  }
          - { cxx: 'clang++', build: 'Debug',   llvm: '8'  }
          - { cxx: 'clang++', build: 'Release', llvm: '13' }
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: install_deps
        run: ./ci/install_macos_ax.sh ${{ matrix.config.llvm }}
      - name: build
        run: >
          ./ci/build.sh -v
          --build-type=${{ matrix.config.build }}
          --components="core,bin,axcore,axbin,axtest"
          --cargs=\"
          -DOPENVDB_AX_TEST_CMD_DOWNLOADS=ON
          -DUSE_EXPLICIT_INSTANTIATION=OFF
          -DLLVM_DIR=/usr/local/opt/llvm@${{ matrix.config.llvm }}/lib/cmake/llvm
          \"
      - name: test
        run: cd build && ctest -V
      - name: test_doxygen_examples
        run: ./ci/extract_test_examples.sh

  windows-ax:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'ax'
    runs-on: windows-2019
    name: windows-vc:${{ matrix.config.vc }}-type:${{ matrix.config.build }}
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.config.vc }}
    strategy:
      matrix:
        config:
          # static build of blosc from vcpkg does not build internal sources.
          # USE_STATIC_DEPENDENCIES is required for IlmBase/OpenEXR defines and
          # Boost as both shared and static libs are installed.
          - { vc: 'x64-windows-static', llvm_crt: 'MT',  build: 'Release', cmake: '-DOPENVDB_CORE_SHARED=OFF -DOPENVDB_AX_SHARED=OFF -DUSE_STATIC_DEPENDENCIES=ON -DBLOSC_USE_EXTERNAL_SOURCES=ON' }
          - { vc: 'x64-windows-static', llvm_crt: 'MTd', build: 'Debug',   cmake: '-DOPENVDB_CORE_SHARED=OFF -DOPENVDB_AX_SHARED=OFF -DUSE_STATIC_DEPENDENCIES=ON -DBLOSC_USE_EXTERNAL_SOURCES=ON' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: path
      run: |
        # note: system path must be modified in a previous step to it's use
        echo "$Env:VCPKG_INSTALLATION_ROOT\installed\${{ matrix.config.vc }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{github.workspace}}\build\openvdb\openvdb\${{ matrix.config.build }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: llvm
      shell: bash
      # If building debug, build llvm with MTd
      run: ./ci/install_llvm_windows.sh ${{ matrix.config.llvm_crt }}
    - name: install
      shell: bash
      run: |
        vcpkg update
        vcpkg install zlib tbb cppunit blosc \
          boost-iostreams boost-system boost-any boost-uuid boost-interprocess boost-algorithm
    - name: build
      shell: bash
      run: >
        ./ci/build.sh -v
        --config=${{ matrix.config.build }}
        --components=\"core,bin,axcore,axbin,axtest\"
        --cargs=\'
        -A x64 -G \"Visual Studio 16 2019\"
        -DVCPKG_TARGET_TRIPLET=${VCPKG_DEFAULT_TRIPLET}
        -DCMAKE_TOOLCHAIN_FILE=\"${VCPKG_INSTALLATION_ROOT}\\scripts\\buildsystems\\vcpkg.cmake\"
        -DOPENVDB_AX_TEST_CMD_DOWNLOADS=ON
        -DUSE_EXPLICIT_INSTANTIATION=OFF
        -DLLVM_DIR=${HOME}\llvm_install\lib\cmake\llvm
        ${{ matrix.config.cmake }}
        \'
    - name: test
      shell: bash
      run: cd build && ctest -V -C ${{ matrix.config.build }}

  #############################################################################
  ################################## Blosc ####################################
  #############################################################################

  linux-blosc:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'blosc'
    runs-on: ubuntu-latest
    name: linux-blosc:${{ matrix.blosc }}
    strategy:
      matrix:
        blosc: ['1.17.0','1.18.0','1.19.0','1.20.0','1.21.0']
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: install_boost
      run: sudo apt-get -q install -y libboost-dev libboost-system-dev libboost-iostreams-dev
    - name: install_tbb
      run: sudo apt-get -q install -y libtbb-dev
    - name: install_gtest
      run: sudo apt-get -q install -y libgtest-dev
    - name: install_blosc
      shell: bash
      run: sudo ./ci/install_blosc.sh ${{ matrix.blosc }}
    - name: build
      run: >
        sudo ./ci/build.sh -v
        --build-type=Release
        --components=\"core,test\"
    - name: test
      run: cd build && sudo ctest -V

  #############################################################################
  ################################## ABI ######################################
  #############################################################################

  linux-abi-checker:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'abi'
    # abi-dumper version verified to work with 20.04/GCC9
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: install_deps
      run: sudo apt-get -q install -y libboost-dev libboost-system-dev libboost-iostreams-dev libtbb-dev libblosc-dev elfutils
    # abi-compliance-checker and abi-dumper
    #
    # @note that abi-dumper is available through apt but at the time of writing this
    # the version there (1.1) doesn't work correctly and maniftest by creating an
    # invalid ABI report with missing headers. This then always reports 100% success
    # rate when used with abi-compliance-checker.
    # To fix, install both from source and checkout specific commits for both
    # which have been verified to work on ubuntu 20.04.
    #
    # @warning  If you update these, test that they fail when expected!
    #
    # Also note that these are far superior to abigail/abidiff tools from redhat
    - name: install_abi_checker
      run: |
        git clone https://github.com/lvc/abi-dumper.git abi-dumper
        cd abi-dumper && git checkout 16bb467cd7d343dd3a16782b151b56cf15509594 && cd -
        git clone https://github.com/lvc/abi-compliance-checker abi-compliance-checker
        cd abi-compliance-checker && git checkout 7c175c45a8ba9ac41b8e47d8ebbab557b623b18e && cd -
    - name: build_latest
      run: |
        CXXFLAGS=-Og ./ci/build.sh --build-dir=build_latest -v --build-type=Debug --target=openvdb_shared --components=\"core\" --cargs=\'-DUSE_EXPLICIT_INSTANTIATION=OFF\'
    - name: build_9
      run: |
        git checkout v9.0.0
        CXXFLAGS=-Og ./ci/build.sh -v --build-type=Debug --target=openvdb_shared --components=\"core\" --cargs=\'-DUSE_EXPLICIT_INSTANTIATION=OFF\'
    - name: abi_check
      # -strict treats warnings as errors
      run: |
        abi-dumper/abi-dumper.pl build_latest/openvdb/openvdb/libopenvdb.so -o ABI-1.dump -lver 1
        abi-dumper/abi-dumper.pl        build/openvdb/openvdb/libopenvdb.so -o ABI-2.dump -lver 2
        abi-compliance-checker/abi-compliance-checker.pl -l OPENVDB -old ABI-2.dump -new ABI-1.dump -strict
    - name: upload_report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: abi_report
        path: ./compat_reports/OPENVDB/2_to_1/compat_report.html
        retention-days: 5

