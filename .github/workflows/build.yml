
name: Build

on:
  push:
    branches:
      - 'master'
      - 'feature/**'
      - 'pr/**'
    paths-ignore:
      - 'CHANGES'
      - 'CODEOWNERS'
      - 'doc/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'openvdb_ax/**'
      - 'nanovdb/**'
      - 'pendingchanges/**'
      - '**.md'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - 'CHANGES'
      - 'CODEOWNERS'
      - 'doc/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'openvdb_ax/**'
      - 'nanovdb/**'
      - 'pendingchanges/**'
      - '**.md'
  schedule:
    # run this workflow every day at 7am UTC except Monday
    - cron:  '0 7 * * 0,2-6'
    # run this workflow Monday 7am UTC
    # warning: This pattern is checked in various places below
    - cron:  '0 7 * * 1'
  workflow_dispatch:
    inputs:
      type:
        description: 'The type of CI to run (all, linux, win, mac)'
        required: true
        default: 'all'

jobs:
  linux-vfx:
    # VFX platform jobs. These are run on the appropriate CentOS images from
    # the provided ASWF docker containers
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'linux'
    runs-on: ubuntu-latest
    name: >
      linux-vfx:${{ matrix.config.image }}-
      abi:${{ matrix.config.abi }}-
      cxx:${{ matrix.config.cxx }}-
      type:${{ matrix.config.build }}
    container:
      image: aswf/ci-openvdb:${{ matrix.config.image }}
    env:
      CXX: ${{ matrix.config.cxx }}
      CCACHE_DIR: /tmp/ccache
    strategy:
      matrix:
        config:
          - { cxx: clang++, image: '2022-clang11', abi: '9', build: 'Release' }
          - { cxx: clang++, image: '2022-clang11', abi: '9', build: 'Debug'   }
          - { cxx: clang++, image: '2021', abi: '8', build: 'Release' }
          - { cxx: clang++, image: '2020', abi: '7', build: 'Release' }
          - { cxx: g++,     image: '2022-clang11', abi: '9', build: 'Release' }
          - { cxx: g++,     image: '2021', abi: '8', build: 'Release' }
          - { cxx: g++,     image: '2020', abi: '7', build: 'Release' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: timestamp
      id: timestamp
      shell: bash
      run: echo "::set-output name=timestamp::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
    - name: ccache
      # don't use ccache for debug builds
      if: matrix.config.build == 'Release'
      id: ccache
      uses: actions/cache@v2
      with:
        path: /tmp/ccache
        key: linux-vfx${{ matrix.config.image }}-abi${{ matrix.config.abi }}-${{ matrix.config.cxx }}-${{ steps.timestamp.outputs.timestamp }}
        restore-keys: linux-vfx${{ matrix.config.image }}-abi${{ matrix.config.abi }}-${{ matrix.config.cxx }}-
    - name: build
      run: >
        ./ci/build.sh -v
        --build-type=${{ matrix.config.build }}
        --components=\"core,python,bin,view,render,test\"
        --cargs=\"-DOPENVDB_CXX_STRICT=ON -DOPENVDB_ABI_VERSION_NUMBER=${{ matrix.config.abi }}\"
    - name: test
      # Always run tests on weekly builds but skip Debug on commits as they take a while.
      # https://github.community/t/distinct-job-for-each-schedule/17811/2
      if: contains(github.event.schedule, '0 7 * * 1') || matrix.config.build == 'Release'
      run: |
        cd build && ctest -V
        cd - && ./ci/test_install.sh
    # Keep ccache light by stripping out any caches not accessed in the last day
    - name: ccache_clean
      if: matrix.config.build == 'Release'
      shell: bash
      run: ccache --evict-older-than 1d

  windows:
    # Windows CI. Tests static and dynamic builds with MT and MD respectively.
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'win'
    runs-on: windows-2019
    name: windows-vc:${{ matrix.config.vc }}-type:${{ matrix.config.build }}
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.config.vc }}
    strategy:
      matrix:
        config:
          # static build of blosc from vcpkg does not build internal sources.
          # USE_STATIC_DEPENDENCIES is required for IlmBase/OpenEXR defines and
          # Boost as both shared and static libs are installed.
          # USE_EXPLICIT_INSTANTIATION is disabled for debug static libraries
          # due to disk space constraints
          - { vc: 'x64-windows-static', build: 'Release', cmake: '-A x64 -G \"Visual Studio 16 2019\" -DOPENVDB_CORE_SHARED=OFF -DUSE_STATIC_DEPENDENCIES=ON -DBLOSC_USE_EXTERNAL_SOURCES=ON' }
          - { vc: 'x64-windows-static', build: 'Debug',   cmake: '-A x64 -G \"Visual Studio 16 2019\" -DOPENVDB_CORE_SHARED=OFF -DUSE_STATIC_DEPENDENCIES=ON -DBLOSC_USE_EXTERNAL_SOURCES=ON -DUSE_EXPLICIT_INSTANTIATION=OFF' }
          - { vc: 'x64-windows',        build: 'Release', cmake: '-A x64 -G \"Visual Studio 16 2019\" -DOPENVDB_CORE_STATIC=OFF' }
          - { vc: 'x64-windows',        build: 'Debug',   cmake: '-A x64 -G \"Visual Studio 16 2019\" -DOPENVDB_CORE_STATIC=OFF' }
          #- { vc: 'x64-windows',        build: 'Release', cmake: '-G \"MinGW Makefiles\" -DOPENVDB_CORE_STATIC=OFF' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: path
      run: |
        # note: system path must be modified in a previous step to it's use
        echo "$Env:VCPKG_INSTALLATION_ROOT\installed\${{ matrix.config.vc }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{github.workspace}}\build\openvdb\openvdb\${{ matrix.config.build }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: install
      shell: bash
      run: ./ci/install_windows.sh
    - name: build
      shell: bash
      run: >
        ./ci/build.sh -v
        --config=${{ matrix.config.build }}
        --components=\"core,bin,view,render,test\"
        --cargs=\'${{ matrix.config.cmake }} -DUSE_EXR=ON -DUSE_PNG=ON -DVCPKG_TARGET_TRIPLET=${VCPKG_DEFAULT_TRIPLET} -DCMAKE_TOOLCHAIN_FILE=\"${VCPKG_INSTALLATION_ROOT}\\scripts\\buildsystems\\vcpkg.cmake\"\'
    - name: test
      shell: bash
      # Always run tests on weekly builds but skip Debug on commits as they take a while.
      # https://github.community/t/distinct-job-for-each-schedule/17811/2
      if: contains(github.event.schedule, '0 7 * * 1') || matrix.config.build == 'Release'
      run: cd build && ctest -V -C ${{ matrix.config.build }}

  testmacos11:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'mac'
    runs-on: macos-11
    env:
      CXX: clang++
    steps:
    - uses: actions/checkout@v2
    - name: install
      shell: bash
      # brew boost-python3 installs a "Keg-only" version of python which is
      # not installed to PATH. We must manually provide the location of the
      # required python installation to CMake through a hint variable which
      # is exported in install_macos.sh
      run: ./ci/install_macos.sh
    - name: install
      shell: bash
      run: ./ci/install_blosc.sh 1.5.0
    - name: build
      shell: bash
      # Also need to disable compiler warnings for ABI 6 and above due to
      # the version of clang installed
      run: >
        ./ci/build.sh -v
        --build-type=Release
        --components=\"core,python,bin,view,render,test\"
        --cargs=\"-DOPENVDB_CXX_STRICT=OFF -DOPENVDB_ABI_VERSION_NUMBER=9 -DOPENVDB_SIMD=SSE42\"
    - name: test
      shell: bash
      run: cd build && ctest -V
