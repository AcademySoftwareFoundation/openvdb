
name: Build

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'CHANGES'
      - 'doc/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'openvdb_ax/**'
      - 'pendingchanges/**'
      - '**.md'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - 'CHANGES'
      - 'doc/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'openvdb_ax/**'
      - 'pendingchanges/**'
      - '**.md'
  schedule:
    # run this workflow every day at 7am UTC
    - cron:  '0 7 * * *'
    # run this workflow every Monday 00:00 UTC
    # warning: This pattern is checked in various places below
    - cron:  '0 0 * * 1'

jobs:
  linux-vfx:
    # VFX platform jobs. These are run on the appropriate CentOS images from
    # the provided ASWF docker containers
    runs-on: ubuntu-latest
    name: >
      linux-vfx:${{ matrix.config.image }}-
      abi:${{ matrix.config.abi }}-
      cxx:${{ matrix.config.cxx }}-
      type:${{ matrix.config.build }}
    container:
      image: aswf/ci-openvdb:${{ matrix.config.image }}
    env:
      CXX: ${{ matrix.config.cxx }}
    strategy:
      matrix:
        config:
          - { cxx: clang++, image: '2020', abi: '7', build: 'Release' }
          - { cxx: clang++, image: '2021', abi: '8', build: 'Release' }
          - { cxx: clang++, image: '2022-clang10', abi: '9', build: 'Release' }
          - { cxx: clang++, image: '2021', abi: '8', build: 'Debug'   }
          - { cxx: g++,     image: '2020', abi: '7', build: 'Release' }
          - { cxx: g++,     image: '2021', abi: '8', build: 'Release' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: install_gtest
      run: ./ci/install_gtest.sh 1.8.0
    - name: build
      run: ./ci/build.sh ${{ matrix.config.build }} "core,python,bin,test" \
        -DOPENVDB_CXX_STRICT=ON -DOPENVDB_ABI_VERSION_NUMBER=${{ matrix.config.abi }}
    - name: test
      # Always run tests on weekly builds but skip Debug on commits as they take a while.
      # https://github.community/t/distinct-job-for-each-schedule/17811/2
      if: contains(github.event.schedule, '0 0 * * 1') || matrix.config.build == 'Release'
      run: |
        cd build && ctest -V
        cd - && ./ci/test_install.sh

  windows:
    # Windows CI. Tests static and dynamic builds with MT and MD respectively.
    runs-on: windows-2019
    name: windows-vc:${{ matrix.config.vc }}-type:${{ matrix.config.build }}
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.config.vc }}
    strategy:
      matrix:
        config:
          # static build of blosc from vcpkg does not build internal sources.
          # USE_STATIC_DEPENDENCIES is required for IlmBase/OpenEXR defines and
          # Boost as both shared and static libs are installed.
          - { vc: 'x64-windows-static', build: 'Release', cmake: '-DOPENVDB_CORE_SHARED=OFF -DUSE_STATIC_DEPENDENCIES=ON -DBLOSC_USE_EXTERNAL_SOURCES=ON' }
          - { vc: 'x64-windows-static', build: 'Debug',   cmake: '-DOPENVDB_CORE_SHARED=OFF -DUSE_STATIC_DEPENDENCIES=ON -DBLOSC_USE_EXTERNAL_SOURCES=ON' }
          - { vc: 'x64-windows',        build: 'Release', cmake: '-DOPENVDB_CORE_STATIC=OFF' }
          - { vc: 'x64-windows',        build: 'Debug',   cmake: '-DOPENVDB_CORE_STATIC=OFF' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: path
      run: |
        # note: system path must be modified in a previous step to it's use
        echo "$Env:VCPKG_INSTALLATION_ROOT\installed\${{ matrix.config.vc }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{github.workspace}}\build\openvdb\openvdb\${{ matrix.config.build }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: install
      shell: bash
      run: ./ci/install_windows.sh
    - name: build
      shell: bash
      run: ./ci/build_windows.sh ${{ matrix.config.build }} ${{ matrix.config.cmake }}
    - name: test
      shell: bash
      # Always run tests on weekly builds but skip Debug on commits as they take a while.
      # https://github.community/t/distinct-job-for-each-schedule/17811/2
      if: contains(github.event.schedule, '0 0 * * 1') || matrix.config.build == 'Release'
      run: cd build && ctest -V

  linux-extra:
    # Extra configuration tests, all run on the ASWF docker images. These run weekly
    # rather than on PR/merge
    if: contains(github.event.schedule, '0 0 * * 1')
    runs-on: ubuntu-latest
    name: linux-extra:${{ matrix.config.name }}
    container:
      image: aswf/ci-openvdb:2021
    env:
      CXX: clang++
    strategy:
      matrix:
        config:
          - { name: 'abi8lite', cmake: '-DUSE_BLOSC=OFF -DUSE_ZLIB=OFF' }
          - { name: 'abi8half', cmake: '-DUSE_BLOSC=OFF -DUSE_IMATH_HALF=ON' }
          - { name: 'abi8sse',  cmake: '-DOPENVDB_SIMD=SSE42' }
          - { name: 'abi8avx',  cmake: '-DOPENVDB_SIMD=AVX' }
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: install_gtest
      run: ./ci/install_gtest.sh 1.10.0
    - name: build
      run: ./ci/build.sh Release "core,python,bin,test" \
        -DOPENVDB_CXX_STRICT=ON -DOPENVDB_ABI_VERSION_NUMBER=8 ${{ matrix.config.cmake }}
    - name: test
      run: cd build && ctest -V

  testabi8gcc10:
    runs-on: ubuntu-20.04
    env:
      CXX: g++-10
    steps:
    - uses: actions/checkout@v2
    - name: install_boost
      run: sudo apt-get -q install -y libboost-dev libboost-system-dev libboost-iostreams-dev
    - name: install_tbb
      run: sudo apt-get -q install -y libtbb-dev
    - name: install_gtest
      run: sudo apt-get -q install -y libgtest-dev
    - name: build
      run: ./ci/build.sh Release "core,test" \
        -DUSE_BLOSC=OFF -DUSE_ZLIB=OFF -DOPENVDB_ABI_VERSION_NUMBER=8 -DCMAKE_INSTALL_PREFIX=`pwd`
    - name: test
      run: cd build && ctest -V

  testabi8clang10:
    runs-on: ubuntu-20.04
    env:
      CXX: clang++-10
    steps:
    - uses: actions/checkout@v2
    - name: install_boost
      run: sudo apt-get -q install -y libboost-dev libboost-system-dev libboost-iostreams-dev
    - name: install_tbb
      run: sudo apt-get -q install -y libtbb-dev
    - name: install_gtest
      run: sudo apt-get -q install -y libgtest-dev
    - name: build
      run: ./ci/build.sh Release "core,test" \
        -DUSE_BLOSC=OFF -DUSE_ZLIB=OFF -DOPENVDB_ABI_VERSION_NUMBER=8 -DCMAKE_INSTALL_PREFIX=`pwd`
    - name: test
      run: cd build && ctest -V

  testmacos1015:
    runs-on: macos-10.15
    env:
      CXX: clang++
    steps:
    - uses: actions/checkout@v2
    - name: install
      shell: bash
      # brew boost-python3 installs a "Keg-only" version of python which is
      # not installed to PATH. We must manually provide the location of the
      # required python installation to CMake through a hint variable which
      # is exported in install_macos.sh
      run: ./ci/install_macos.sh
    - name: install
      shell: bash
      run: ./ci/install_blosc.sh 1.5.0
    - name: install
      shell: bash
      run: ./ci/install_gtest.sh 1.10.0
    - name: build
      shell: bash
      # Also need to disable compiler warnings for ABI 6 and above due to
      # the version of clang installed
      run: ./ci/build.sh Release "core,python,bin,test" \
        -DOPENVDB_CXX_STRICT=OFF -DOPENVDB_ABI_VERSION_NUMBER=8 -DOPENVDB_SIMD=SSE42
    - name: test
      shell: bash
      run: cd build && ctest -V

  testmacos1015_tbb2021:
    runs-on: macos-10.15
    env:
      CXX: clang++
    steps:
    - uses: actions/checkout@v2
    - name: install
      shell: bash
      run: |
        brew update
        brew install bash cmake ilmbase openexr@2 boost tbb glfw
        echo "IlmBase_ROOT=/usr/local/opt/ilmbase" >> $GITHUB_ENV
        echo "OpenEXR_ROOT=/usr/local/opt/openexr@2" >> $GITHUB_ENV
        echo "/usr/local/opt/openexr@2/bin" >> $GITHUB_PATH
    - name: install
      shell: bash
      run: ./ci/install_gtest.sh 1.10.0
    - name: build
      shell: bash
      run: ./ci/build.sh Release "core,bin,test" \
         -DOPENVDB_CXX_STRICT=OFF -DUSE_BLOSC=OFF -DUSE_ZLIB=OFF
    - name: test
      shell: bash
      run: cd build && ctest -V
