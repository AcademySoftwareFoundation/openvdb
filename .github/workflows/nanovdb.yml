
name: NanoVDB

on:
  push:
    branches:
      - 'master'
      - 'feature/**'
      - 'pr/**'
    paths-ignore:
      - 'CHANGES'
      - 'CODEOWNERS'
      - 'doc/**'
      - 'openvdb_ax/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'fvdb/**'
      - 'pendingchanges/**'
      - '**.md'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - 'CHANGES'
      - 'CODEOWNERS'
      - 'doc/**'
      - 'openvdb_ax/**'
      - 'openvdb_maya/**'
      - 'openvdb_houdini/**'
      - 'fvdb/**'
      - 'pendingchanges/**'
      - '**.md'
  schedule:
    # run this workflow every day 7am UTC
    - cron:  '0 7 * * *'
  workflow_dispatch:
    inputs:
      type:
        description: 'The type of CI to run (all, linux, win, mac)'
        required: true
        default: 'all'

# Allow subsequent pushes to the same PR or REF to cancel any previous jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  linux-nanovdb:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'linux'
    runs-on: ${{ (github.repository_owner == 'AcademySoftwareFoundation' && 'ubuntu-20.04-8c-32g-300h') || 'ubuntu-latest' }}
    name: >
      linux-nanovdb:cxx:${{ matrix.config.cxx }}-${{ matrix.config.build }}
    container:
      image: aswf/ci-openvdb:${{ matrix.config.image }}
    env:
      CXX: ${{ matrix.config.cxx }}
    strategy:
      matrix:
        config:
          - { cxx: g++,     image: '2024', build: 'Release' }
          - { cxx: g++,     image: '2024', build: 'Debug' }
          - { cxx: clang++, image: '2024', build: 'Release' }
          - { cxx: clang++, image: '2024', build: 'Debug' }
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: setup_cuda_12
        run: |
          yum -y install yum-utils
          echo "/usr/local/cuda-12/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/usr/local/cuda-12/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      - name: build
      # NOTE: CMAKE_POSITION_INDEPENDENT_CODE set to fix default behaviour change in clang 14
      #   https://github.com/AcademySoftwareFoundation/aswf-docker/issues/228
        run: >
          ./ci/build.sh -v
          --build-type=${{ matrix.config.build }}
          --components=core,nano,nanotest,nanoexam,nanobench,nanotool
          --cargs=\'
          -DUSE_EXPLICIT_INSTANTIATION=OFF
          -DNANOVDB_USE_CUDA=ON
          -DNANOVDB_USE_OPENVDB=ON
          -DCMAKE_INSTALL_PREFIX=`pwd`
          -DUSE_BLOSC=OFF
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          \'
      - name: test
        run: cd build && sudo ctest -V -E ".*cuda.*"

  windows-nanovdb:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'win'
    runs-on: ${{ (github.repository_owner == 'AcademySoftwareFoundation' && 'windows-2022-8c-32g-300h') || 'windows-latest' }}
    env:
      VCPKG_DEFAULT_TRIPLET: 'x64-windows'
      visual_studio: "Visual Studio 17 2022"
      cuda: "12.4.0"
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: path
      run: |
        # note: system path must be modified in a previous step to it's use
        echo "$Env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{github.workspace}}\build\openvdb\openvdb\Release" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: install_cuda
      shell: powershell
      run: .\ci\install_windows_cuda.ps1
    - name: install
      shell: powershell
      run: .\ci\install_windows.ps1
    - name: build
      shell: bash
      run: >
        ./ci/build.sh -v
        --config=Release
        --components=core,nano,nanotest,nanoexam,nanobench,nanotool
        --cargs=\'
        -A x64 -G \"Visual Studio 17 2022\" -DOPENVDB_CORE_STATIC=OFF
        -DMSVC_COMPRESS_PDB=ON
        -DUSE_EXPLICIT_INSTANTIATION=OFF
        -DNANOVDB_USE_CUDA=ON
        -DNANOVDB_USE_OPENVDB=ON
        -DVCPKG_TARGET_TRIPLET=${VCPKG_DEFAULT_TRIPLET}
        -DCMAKE_TOOLCHAIN_FILE=\"${VCPKG_INSTALLATION_ROOT}\\scripts\\buildsystems\\vcpkg.cmake\"
        \'
    - name: test
      shell: bash
      run: cd build && ctest -V -E ".*cuda.*"

  macos-nanovdb:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'mac'
    runs-on: ${{ matrix.config.runner }}
    env:
      CXX: ${{ matrix.config.cxx }}
    strategy:
      matrix:
        config:
          - { runner: 'macos-13', cxx: 'clang++', build: 'Release' }
          - { runner: 'macos-13', cxx: 'clang++', build: 'Debug'   }
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: install_deps
        run: |
          ./ci/install_macos.sh
          ./ci/install_tbb_macos.sh
      - name: build
        run: >
          ./ci/build.sh -v
          --build-type=${{ matrix.config.build }}
          --components=core,nano,nanotest,nanoexam,nanobench,nanotool
          --cargs=\'-DUSE_EXPLICIT_INSTANTIATION=OFF -DNANOVDB_USE_CUDA=OFF -DNANOVDB_USE_OPENVDB=ON\'
      - name: test
        run: cd build && ctest -V -E ".*cuda.*"

  nanovdb-lite:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.type == 'all' ||
      github.event.inputs.type == 'linux'
    runs-on: ${{ (github.repository_owner == 'AcademySoftwareFoundation' && 'ubuntu-20.04-8c-32g-300h') || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v3
      - name: install_gtest
        run: |
          sudo apt-get update
          sudo apt-get -q install -y libgtest-dev
      - name: build_and_test
        run: |
          cd nanovdb/nanovdb
          sudo mkdir .build
          cd .build
          sudo cmake -DUSE_EXPLICIT_INSTANTIATION=OFF -DNANOVDB_BUILD_UNITTESTS=ON -DNANOVDB_USE_OPENVDB=OFF -DNANOVDB_USE_CUDA=OFF ../
          sudo make -j8 install
          sudo ctest -V
